{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Deep learning's recent history has been one of achievement: from triumphing over humans in the game of Go to world-leading performance in image recognition, voice recognition, translation, and other tasks. But this progress has come with a voracious appetite for computing power. Recently, researchers from MIT, UnB, IBM, and Yonsei University published a paper named \"The Computational Limits of Learning\" and warned society about this issue. This article reports on the computational demands of Deep Learning applications in five prominent application areas and shows that progress in all five is strongly reliant on increases in computing power. Extrapolating forward this reliance reveals that progress along current lines is rapidly becoming economically, technically, and environmentally unsustainable. Thus, continued progress in these applications will require dramatically more computationally-efficient methods, which will either have to come from changes to deep learning or from moving to other machine learning methods. Our project aims to develop a web application for this paper where will be possible for people/community to have access to the data and the paper's analysis, and also allowing them to continuously contribute with it. Paper link You want to understand the beahavior of Deep Learning models in terms of scalabily or other Deep Learning issues? Or share your paper? The TCLDL can help you. TLCL is a web site for update papers related to deep leraning, share it, and show it in some graphics. Team Document Versioning Date Author(s) Description Version 09/01/20 Lorrany Azevedo Document creation 0.1 09/01/20 Lorrany Azevedo Document edit 0.2 09/01/20 Lorrany Azevedo and Mikhaele stylization of documentation 0.3 17/01/20 Lorrany Azevedo Bugfix in description and members photo 0.4","title":"Home"},{"location":"#about","text":"Deep learning's recent history has been one of achievement: from triumphing over humans in the game of Go to world-leading performance in image recognition, voice recognition, translation, and other tasks. But this progress has come with a voracious appetite for computing power. Recently, researchers from MIT, UnB, IBM, and Yonsei University published a paper named \"The Computational Limits of Learning\" and warned society about this issue. This article reports on the computational demands of Deep Learning applications in five prominent application areas and shows that progress in all five is strongly reliant on increases in computing power. Extrapolating forward this reliance reveals that progress along current lines is rapidly becoming economically, technically, and environmentally unsustainable. Thus, continued progress in these applications will require dramatically more computationally-efficient methods, which will either have to come from changes to deep learning or from moving to other machine learning methods. Our project aims to develop a web application for this paper where will be possible for people/community to have access to the data and the paper's analysis, and also allowing them to continuously contribute with it. Paper link You want to understand the beahavior of Deep Learning models in terms of scalabily or other Deep Learning issues? Or share your paper? The TCLDL can help you. TLCL is a web site for update papers related to deep leraning, share it, and show it in some graphics.","title":"About"},{"location":"#team","text":"","title":"Team"},{"location":"#document-versioning","text":"Date Author(s) Description Version 09/01/20 Lorrany Azevedo Document creation 0.1 09/01/20 Lorrany Azevedo Document edit 0.2 09/01/20 Lorrany Azevedo and Mikhaele stylization of documentation 0.3 17/01/20 Lorrany Azevedo Bugfix in description and members photo 0.4","title":"Document Versioning"},{"location":"contributing/","text":"Contributing To contribute to this project follow the guide on how to contribute. 1- Create a fork or clone the repository. git clone https://github.com/UnBArqDsw/2020.1_G2_TCLDL.git 2- If you want to change something, create a branch following the branch policy of this project. 3- Commit you change following the commit policy of this project 4- Create a pull request following the Pull Request policy Branches Policy The Branches of the project must include the following specifications: The beginning of the branch name must be informing which group it belongs to, being: TCLDL-feature: For adding features or changes to an existing one; TCLDL-bugfix: For bug fixes; The name of the branch must be related to the issue separated by a slash('-') Each branch is aimed at solving a single issue, after closing the issue the branch must be deleted Exemplo: TCLDL-feature-prototype Branch Flow Branch Flow The project will adopt a git flow based on git-flow: master: Is the main branch of the repository and plays the role of the production environment. It only accepts duly tested and validated code, so that all insertions made there will be the project releases; dev: is the branch that will concentrate all the new functionalities of the project, where it will perform the role of concentrating the work of the development environment, bug fixing and finalization of tests; feature (feat): type of branch used for the development of a new project feature, so the name of the branch should be \"feature-\" and the name related to the issue in github. Ex: \u201cTCLDL-feature-prototype\u201d; Bugfix (bug): Branch to fix bugs in production; Commits Policy The Commits of the project must include the following specifications: Must be written in English and use the imperative verbs Example: update project readme For joint work, use co-authored to include as a contributor in the commit message body: add signin feature Co-authored-by: Fulano <funalo@outlook.com> Pull Request Policies Creation of Pull Request Consider a hypothetical situation where we are looking to create a PR for a branch called Sprints for master . Note: The creation of the PR must be done right after the beginning of the work on an issue. For that, we work with the status WIP flag. To create a pull request directed to a master branch, the following steps must be followed: 1) Add the status flag Title the PR with the tag WIP (ie work in progress ) 2) Add a description Use issue template for pull request . Remembering that the pull request has the branch base to master and compare to the branch that you want to join. Remembering : as soon as the changes regarding the pull request are really finalized, the WIP tag must be removed. 3) Add the reviewers Check the reviewers , that is, those responsible for the analysis of the pull request . 4) Add the assignees Tick the pull request employees 5) Add the appropriate labels Check the labels related to the pull request . It will generally be the same as indicated in the referring issue. 6) Add the appropriate milestone Check the Milestone , that is, the current sprint or release . 7) Explain the issue related to PR Connect the issue worked on this pull request through closing keywords . Issue to be linked Syntax Example Issue within this repository KEYWORD # ISSUE-NUMBER Close #10 8) Conflicts If a pull request causes some kind of conflict, it must be resolved first by the team that developed what is causing the conflict, valuing the integrity and organization of the commits history, and then the request for merge evaluation must be redone. Document Versioning Date Author(s) Description Version 09/09/20 Mikhaelle Bueno Document creation and edit 1.1 09/09/20 Gabriel Filipe Adds PR policy 1.2 21/09/20 Gabriel Filipe Adds PR policy 1.2","title":"Contribution guide"},{"location":"contributing/#contributing","text":"To contribute to this project follow the guide on how to contribute. 1- Create a fork or clone the repository. git clone https://github.com/UnBArqDsw/2020.1_G2_TCLDL.git 2- If you want to change something, create a branch following the branch policy of this project. 3- Commit you change following the commit policy of this project 4- Create a pull request following the Pull Request policy","title":"Contributing"},{"location":"contributing/#branches-policy","text":"The Branches of the project must include the following specifications: The beginning of the branch name must be informing which group it belongs to, being: TCLDL-feature: For adding features or changes to an existing one; TCLDL-bugfix: For bug fixes; The name of the branch must be related to the issue separated by a slash('-') Each branch is aimed at solving a single issue, after closing the issue the branch must be deleted Exemplo: TCLDL-feature-prototype","title":"Branches Policy"},{"location":"contributing/#branch-flow","text":"","title":"Branch Flow"},{"location":"contributing/#branch-flow_1","text":"The project will adopt a git flow based on git-flow: master: Is the main branch of the repository and plays the role of the production environment. It only accepts duly tested and validated code, so that all insertions made there will be the project releases; dev: is the branch that will concentrate all the new functionalities of the project, where it will perform the role of concentrating the work of the development environment, bug fixing and finalization of tests; feature (feat): type of branch used for the development of a new project feature, so the name of the branch should be \"feature-\" and the name related to the issue in github. Ex: \u201cTCLDL-feature-prototype\u201d; Bugfix (bug): Branch to fix bugs in production;","title":"Branch Flow"},{"location":"contributing/#commits-policy","text":"The Commits of the project must include the following specifications: Must be written in English and use the imperative verbs Example: update project readme For joint work, use co-authored to include as a contributor in the commit message body: add signin feature Co-authored-by: Fulano <funalo@outlook.com>","title":"Commits Policy"},{"location":"contributing/#pull-request-policies","text":"","title":"Pull Request Policies"},{"location":"contributing/#creation-of-pull-request","text":"Consider a hypothetical situation where we are looking to create a PR for a branch called Sprints for master .","title":"Creation of Pull Request"},{"location":"contributing/#note","text":"The creation of the PR must be done right after the beginning of the work on an issue. For that, we work with the status WIP flag.","title":"Note:"},{"location":"contributing/#to-create-a-pull-request-directed-to-a-master-branch-the-following-steps-must-be-followed","text":"","title":"To create a pull request directed to a master branch, the following steps must be followed:"},{"location":"contributing/#1-add-the-status-flag","text":"Title the PR with the tag WIP (ie work in progress )","title":"1) Add the status flag"},{"location":"contributing/#2-add-a-description","text":"Use issue template for pull request . Remembering that the pull request has the branch base to master and compare to the branch that you want to join. Remembering : as soon as the changes regarding the pull request are really finalized, the WIP tag must be removed.","title":"2) Add a description"},{"location":"contributing/#3-add-the-reviewers","text":"Check the reviewers , that is, those responsible for the analysis of the pull request .","title":"3) Add the reviewers"},{"location":"contributing/#4-add-the-assignees","text":"Tick the pull request employees","title":"4) Add the assignees"},{"location":"contributing/#5-add-the-appropriate-labels","text":"Check the labels related to the pull request . It will generally be the same as indicated in the referring issue.","title":"5) Add the appropriate labels"},{"location":"contributing/#6-add-the-appropriate-milestone","text":"Check the Milestone , that is, the current sprint or release .","title":"6) Add the appropriate milestone"},{"location":"contributing/#7-explain-the-issue-related-to-pr","text":"Connect the issue worked on this pull request through closing keywords . Issue to be linked Syntax Example Issue within this repository KEYWORD # ISSUE-NUMBER Close #10","title":"7) Explain the issue related to PR"},{"location":"contributing/#8-conflicts","text":"If a pull request causes some kind of conflict, it must be resolved first by the team that developed what is causing the conflict, valuing the integrity and organization of the commits history, and then the request for merge evaluation must be redone.","title":"8) Conflicts"},{"location":"contributing/#document-versioning","text":"Date Author(s) Description Version 09/09/20 Mikhaelle Bueno Document creation and edit 1.1 09/09/20 Gabriel Filipe Adds PR policy 1.2 21/09/20 Gabriel Filipe Adds PR policy 1.2","title":"Document Versioning"},{"location":"finalPresentation/","text":"Final Presentation To watch our presentation click on the image below:","title":"Final Presentation"},{"location":"finalPresentation/#final-presentation","text":"To watch our presentation click on the image below:","title":"Final Presentation"},{"location":"base/designSprint/design_sprint/","text":"Design Sprin What is? The sprint design process aims to be a facilitator when evaluating whether a product idea is a good idea or not. The methodology was created by Google Venture and can be very useful to be used in internal projects of large companies, hackathons, or small projects that need a quick validation and do not have much time or resources to implement an MVP (Minimum Viable Product). This whole process aims to be done in a period of 5 days and then to be validated with users and potential customers, before starting a sprint design it is necessary to have a product idea. The steps for the design sprint are: UNPACK : This step aims to collect opinions from everyone involved in the process about their ideas about the project. SKETCH : At this stage, employees think about possible solutions regarding the problem to be solved and document all this. DECIDE : In this step we filter the ideas that were thought of in the sketch and decided on a solution to be prototyped. PROTOTYPE : In this step, we will prototype the solution from the previous step. TEST : In this step, we validate the prototype with the possible customers and then the team meets to evaluate the feedbacks received. Realization of Design Sprint at TCLDL Problem definition The idea of \u200b\u200bcreating a website based on the paper The computational limits of deep learning was suggested by member Gabriel Filipe, with the suggestion of the idea the group met, discussed the other ideas suggested by other members and we ended up with the idea of \u200b\u200bimplementing the TCLDL. UNPACK In the unpack stage, the group held a meeting where we developed our first artifact which was the brainstorm, in that meeting we used MIRO and Hangouts as a tool, in addition the dynamics consisted of all members giving ideas of possible features of the project and we leave all this noted in the crosshairs. In addition, still in the unpack stage, we produced the 5W2H, the mind map and our argument, by clicking on the links below it is possible to analyze all the documents mentioned above. BrainStorm 5W2H Mind Map SKETCH At this stage, the artifacts produced aim to give us greater clarity about what our product will be, clicking on the link below you have access to the documents produced at this stage: Rich Picture Story Board DECIDE At this stage it was necessary to decide everything that would be in the high-fidelity prototype so we used moscow prioritization and argumentation to do this: Moscow Argumentation PROTOTYPE At this stage, in addition to using the artifacts mentioned above, other artifacts that can be found in our base documentation, we developed our high-fidelity prototype: Prototype TEST Finally, we validate our prototype with our possible users and collect their feedback for possible improvements in the prototype, as it has already been decided that this will be the implemented idea, we will only make the changes requested by users and we will version our prototype until it gets as close as possible to the idea that will be implemented, below we have a video of the meeting with our possible users: Video Link 01 Video Link 02 Adaptations In order for the team to reap the rewards and benefits of the sprint design methodology, some adaptations were made, as has already been said, this process aims to be done within 5 consecutive days in a very agile way, however due to the time differences between members of the team, and the impossibility of doing the whole process in 5 consecutive days the team opted to hold two weekly meetings where in each of the meetings one of the stages of the sprint design was carried out and the elaboration of the aforementioned artifacts was divided together but carried out remotely except for the brainstorm. References [WebSite] Design Sprint Document Versioning Date Author(s) Descri\u00e7\u00e3o Vers\u00e3o 17/09/2020 Lorrany Azevedo Creating the documents 0.1 17/09/2020 Lorrany Azevedo Adding reference 0.1 25/09/2020 Mikhaelle Bueno Fix links 0.1","title":"Design Sprint Doc"},{"location":"base/designSprint/design_sprint/#design-sprin","text":"","title":"Design Sprin"},{"location":"base/designSprint/design_sprint/#what-is","text":"The sprint design process aims to be a facilitator when evaluating whether a product idea is a good idea or not. The methodology was created by Google Venture and can be very useful to be used in internal projects of large companies, hackathons, or small projects that need a quick validation and do not have much time or resources to implement an MVP (Minimum Viable Product). This whole process aims to be done in a period of 5 days and then to be validated with users and potential customers, before starting a sprint design it is necessary to have a product idea. The steps for the design sprint are: UNPACK : This step aims to collect opinions from everyone involved in the process about their ideas about the project. SKETCH : At this stage, employees think about possible solutions regarding the problem to be solved and document all this. DECIDE : In this step we filter the ideas that were thought of in the sketch and decided on a solution to be prototyped. PROTOTYPE : In this step, we will prototype the solution from the previous step. TEST : In this step, we validate the prototype with the possible customers and then the team meets to evaluate the feedbacks received.","title":"What is?"},{"location":"base/designSprint/design_sprint/#realization-of-design-sprint-at-tcldl","text":"","title":"Realization of Design Sprint at TCLDL"},{"location":"base/designSprint/design_sprint/#problem-definition","text":"The idea of \u200b\u200bcreating a website based on the paper The computational limits of deep learning was suggested by member Gabriel Filipe, with the suggestion of the idea the group met, discussed the other ideas suggested by other members and we ended up with the idea of \u200b\u200bimplementing the TCLDL.","title":"Problem definition"},{"location":"base/designSprint/design_sprint/#unpack","text":"In the unpack stage, the group held a meeting where we developed our first artifact which was the brainstorm, in that meeting we used MIRO and Hangouts as a tool, in addition the dynamics consisted of all members giving ideas of possible features of the project and we leave all this noted in the crosshairs. In addition, still in the unpack stage, we produced the 5W2H, the mind map and our argument, by clicking on the links below it is possible to analyze all the documents mentioned above. BrainStorm 5W2H Mind Map","title":"UNPACK"},{"location":"base/designSprint/design_sprint/#sketch","text":"At this stage, the artifacts produced aim to give us greater clarity about what our product will be, clicking on the link below you have access to the documents produced at this stage: Rich Picture Story Board","title":"SKETCH"},{"location":"base/designSprint/design_sprint/#decide","text":"At this stage it was necessary to decide everything that would be in the high-fidelity prototype so we used moscow prioritization and argumentation to do this: Moscow Argumentation","title":"DECIDE"},{"location":"base/designSprint/design_sprint/#prototype","text":"At this stage, in addition to using the artifacts mentioned above, other artifacts that can be found in our base documentation, we developed our high-fidelity prototype: Prototype","title":"PROTOTYPE"},{"location":"base/designSprint/design_sprint/#test","text":"Finally, we validate our prototype with our possible users and collect their feedback for possible improvements in the prototype, as it has already been decided that this will be the implemented idea, we will only make the changes requested by users and we will version our prototype until it gets as close as possible to the idea that will be implemented, below we have a video of the meeting with our possible users: Video Link 01 Video Link 02","title":"TEST"},{"location":"base/designSprint/design_sprint/#adaptations","text":"In order for the team to reap the rewards and benefits of the sprint design methodology, some adaptations were made, as has already been said, this process aims to be done within 5 consecutive days in a very agile way, however due to the time differences between members of the team, and the impossibility of doing the whole process in 5 consecutive days the team opted to hold two weekly meetings where in each of the meetings one of the stages of the sprint design was carried out and the elaboration of the aforementioned artifacts was divided together but carried out remotely except for the brainstorm.","title":"Adaptations"},{"location":"base/designSprint/design_sprint/#references","text":"[WebSite] Design Sprint","title":"References"},{"location":"base/designSprint/design_sprint/#document-versioning","text":"Date Author(s) Descri\u00e7\u00e3o Vers\u00e3o 17/09/2020 Lorrany Azevedo Creating the documents 0.1 17/09/2020 Lorrany Azevedo Adding reference 0.1 25/09/2020 Mikhaelle Bueno Fix links 0.1","title":"Document Versioning"},{"location":"base/designSprint/prototype/","text":"Prototype The prototype was made using Figma. The prototype is important for the testing and requirements gathering phase. Provides an overview of how the project will be developed before the actual code development Figma is software for developing prototypes and creating designs that does not need installation because it is available in the clouds through a web page. It has features for design, prototyping, systems design, collaboration and download. The prototypes have interactions, advanced transitions with intelligent animations, animated GIFs, among others, which allow an experience very close to the real world. It allows quick sharing of the prototype to others and facilitates the contribution. The Protype is avaiable for navegation in: Prototype version 1 Prototype version 2 Prototype version 3 Prototype versioning Date Author(s) Description Version 09/07/2020 Lorrany Azevedo, Mikhaelle bueno, Gabriel Filipe Create project and start Home ,Login and About Us 0.1 09/08/2020 Lorrany Azevedo, Mikhaelle bueno, Gabriel Filipe Start change password, sing up and benchmark 0.2 09/09/2020 Lorrany Azevedo, Mikhaelle bueno, Gabriel Filipe Start admin and collaborator page, domain and user survey page 0.3 09/09/2020 Lorrany Azevedo, Mikhaelle bueno, Gabriel Filipe Start admin and collaborator home, admin submission and review page 0.4 09/25/2020 Lorrany Azevedo Adding version 2 of the prototype 0.5 10/26/2020 Gabriel Filipe Adding version 3 of the prototype 1.0","title":"Prototype"},{"location":"base/designSprint/prototype/#prototype","text":"The prototype was made using Figma. The prototype is important for the testing and requirements gathering phase. Provides an overview of how the project will be developed before the actual code development Figma is software for developing prototypes and creating designs that does not need installation because it is available in the clouds through a web page. It has features for design, prototyping, systems design, collaboration and download. The prototypes have interactions, advanced transitions with intelligent animations, animated GIFs, among others, which allow an experience very close to the real world. It allows quick sharing of the prototype to others and facilitates the contribution. The Protype is avaiable for navegation in: Prototype version 1 Prototype version 2 Prototype version 3","title":"Prototype"},{"location":"base/designSprint/prototype/#prototype-versioning","text":"Date Author(s) Description Version 09/07/2020 Lorrany Azevedo, Mikhaelle bueno, Gabriel Filipe Create project and start Home ,Login and About Us 0.1 09/08/2020 Lorrany Azevedo, Mikhaelle bueno, Gabriel Filipe Start change password, sing up and benchmark 0.2 09/09/2020 Lorrany Azevedo, Mikhaelle bueno, Gabriel Filipe Start admin and collaborator page, domain and user survey page 0.3 09/09/2020 Lorrany Azevedo, Mikhaelle bueno, Gabriel Filipe Start admin and collaborator home, admin submission and review page 0.4 09/25/2020 Lorrany Azevedo Adding version 2 of the prototype 0.5 10/26/2020 Gabriel Filipe Adding version 3 of the prototype 1.0","title":"Prototype versioning"},{"location":"base/documentation/costEstimates/","text":"Cost estimate The calculation of the cost estimate considers three factors acquisition, personal and tool. 1.1 Acquisition cost Equipment Amount Goal Unit value Price Notebooks 5 unit Development and planning R$ 4.000 R$ 20.000,00 Broadband internet 4 months Development and planning R$100/month R$ 2000,00 1.2 Personal cost Role Amount Salary/month (160h total) Salary/hour Total Middle developer 5 R$ 4.000 R$25,00 R$ 22.500\u00b9 Software architect, DevOps, Scrum Master e PO 5 R$ 6.500 R$40,63 R$ 36.567\u00b9 \u00b9 price for 5 members working 12h/week for 15 sprints week-long. 1.3 Tool cost Tool name Goal Total price Google Drive File share R$ 0 Text editor Creating documents and code R$ 0 GitHub Source code management and repository R$ 0 GitHub Actions Pipeline CI/CD R$ 0\u00b9 Google domains Domain name registration service R$ 50,00 Docker Container apps R$ 0 Amazon EC2 Host cloud service R$ 0\u00b2 Amazon RDS Database cloud service R$ 0\u00b3 Amazon SES Email cloud service R$ 0\u2074 Amazon Lambda Lambda function cloud service R$ 0\u2075 RabbitMq Message broker R$ 0 Telegram Members comunication R$ 0 \u00b9 price valid for 2000 minutes/month, after that will cost US$ 0.008 per minute. \u00b2 price valid for 750 hours/year, after that will cost US$ 0,0116 per hour on demand. \u00b3 price valid for 750 hours/year, after that will cost US$ 0,017 per hour on demand. \u2074 price valid for 62000 emails sents, after that will cost US$ 0,10 for every 1000 emails sents. \u2075 price valid if have applications in ec2 and the limit is 1 million request or 400.000 gb/s in compution time, after that will cost US$0,20 at every 1 million request and US$ 0,0000166667 for every gb/s 1.4 Total cost Cost Total value Acquisition R$ 22.000 Personal R$ 59.067 Tools R$ 50 The total value for estimated cost is R$ 81.117,00 Considering the risks, will increase 10% of total project value, the final value for estimated cost is R$89.228,7 . References Meller, Maristela Corr\u00eaa. Modelos Para Estimar Custos De Software: Estudo Comparativo Com Softwares De Pequeno Porte. 2002. Dispon\u00edvel em: https://repositorio.ufsc.br/xmlui/handle/123456789/82351 Document Versioning Date Author(s) Description Version 09/05/2020 Ygor Galeno Document creation 0.1 09/06/2020 Ygor Galeno Finish document 0.2","title":"Cost Estimation"},{"location":"base/documentation/costEstimates/#cost-estimate","text":"The calculation of the cost estimate considers three factors acquisition, personal and tool.","title":"Cost estimate"},{"location":"base/documentation/costEstimates/#11-acquisition-cost","text":"Equipment Amount Goal Unit value Price Notebooks 5 unit Development and planning R$ 4.000 R$ 20.000,00 Broadband internet 4 months Development and planning R$100/month R$ 2000,00","title":"1.1 Acquisition cost"},{"location":"base/documentation/costEstimates/#12-personal-cost","text":"Role Amount Salary/month (160h total) Salary/hour Total Middle developer 5 R$ 4.000 R$25,00 R$ 22.500\u00b9 Software architect, DevOps, Scrum Master e PO 5 R$ 6.500 R$40,63 R$ 36.567\u00b9 \u00b9 price for 5 members working 12h/week for 15 sprints week-long.","title":"1.2 Personal cost"},{"location":"base/documentation/costEstimates/#13-tool-cost","text":"Tool name Goal Total price Google Drive File share R$ 0 Text editor Creating documents and code R$ 0 GitHub Source code management and repository R$ 0 GitHub Actions Pipeline CI/CD R$ 0\u00b9 Google domains Domain name registration service R$ 50,00 Docker Container apps R$ 0 Amazon EC2 Host cloud service R$ 0\u00b2 Amazon RDS Database cloud service R$ 0\u00b3 Amazon SES Email cloud service R$ 0\u2074 Amazon Lambda Lambda function cloud service R$ 0\u2075 RabbitMq Message broker R$ 0 Telegram Members comunication R$ 0 \u00b9 price valid for 2000 minutes/month, after that will cost US$ 0.008 per minute. \u00b2 price valid for 750 hours/year, after that will cost US$ 0,0116 per hour on demand. \u00b3 price valid for 750 hours/year, after that will cost US$ 0,017 per hour on demand. \u2074 price valid for 62000 emails sents, after that will cost US$ 0,10 for every 1000 emails sents. \u2075 price valid if have applications in ec2 and the limit is 1 million request or 400.000 gb/s in compution time, after that will cost US$0,20 at every 1 million request and US$ 0,0000166667 for every gb/s","title":"1.3 Tool cost"},{"location":"base/documentation/costEstimates/#14-total-cost","text":"Cost Total value Acquisition R$ 22.000 Personal R$ 59.067 Tools R$ 50 The total value for estimated cost is R$ 81.117,00 Considering the risks, will increase 10% of total project value, the final value for estimated cost is R$89.228,7 .","title":"1.4 Total cost"},{"location":"base/documentation/costEstimates/#references","text":"Meller, Maristela Corr\u00eaa. Modelos Para Estimar Custos De Software: Estudo Comparativo Com Softwares De Pequeno Porte. 2002. Dispon\u00edvel em: https://repositorio.ufsc.br/xmlui/handle/123456789/82351","title":"References"},{"location":"base/documentation/costEstimates/#document-versioning","text":"Date Author(s) Description Version 09/05/2020 Ygor Galeno Document creation 0.1 09/06/2020 Ygor Galeno Finish document 0.2","title":"Document Versioning"},{"location":"base/documentation/riskPlan/","text":"Risk Plan In the estimate the risks of this project, it was decided to establish a standard for the assessment of probability x impact , also serving to prioritize risks. See tables bellow: Likelihood (L) Weight Rare (< 3%) 1 Unlikely (3% - 10%) 2 Moderate (10% - 50%) 3 Likely (50% - 90%) 4 Almost certain (> 90%) 5 Impact (I) Weight Insignificant 1 Minor 2 Moderate 3 Severe 4 Critical 5 At the beginning of each sprinch, each risk is calculated based on the tables presented before. At every new iteration a known and well-mitigated risk in previous sprints always tends to decrease. Knowing this, risks identified during the project tend to have a high impact and need immediate action. Follows the table for identified risks: id Risk Risk response RS001 Team integration Provide constant feedback to facilitate communication and the constant monitoring of members; RS002 Team commitment Increase the sense of integration between members; Treat individually with the member; Communicate with the teacher in extreme cases RS003 Temporary unavailability of members Warn of setbacks and maintain effective communication between members RS004 Withdrawal of discipline Constant communication between the members; Transparency with team members; Scope replanning to match remaining productivity capacity RS005 Delays in meetings Schedule meetings in advance to avoid hitting schedules with other members' appointments; Individual conversation; RS006 Scope change Constant feedback with the MIT team, through meetings; Search for new alternatives for eliciting requirements RS007 Environment setup Assist the member with difficulty in setting up the machine; Using Docker RS008 Architecture change Creates a resilient and adaptable architecture that is prepared for change RS009 Services integration Study the service documentation RS010 Continuous delivery Define pipeline RS011 Continuous integration Define pipeline RS012 Technical difficulty Constant and effective communication between members Choosing tools that have a good learning curve References [Moodle] Serrano, Milene. V\u00eddeo Aula : Plano de Riscos. Document Versioning Date Author(s) Description Version 09/06/2020 Ygor Galeno Document creation 0.1 09/07/2020 Ygor Galeno Finish document 0.2","title":"Risk Plan"},{"location":"base/documentation/riskPlan/#risk-plan","text":"In the estimate the risks of this project, it was decided to establish a standard for the assessment of probability x impact , also serving to prioritize risks. See tables bellow: Likelihood (L) Weight Rare (< 3%) 1 Unlikely (3% - 10%) 2 Moderate (10% - 50%) 3 Likely (50% - 90%) 4 Almost certain (> 90%) 5 Impact (I) Weight Insignificant 1 Minor 2 Moderate 3 Severe 4 Critical 5 At the beginning of each sprinch, each risk is calculated based on the tables presented before. At every new iteration a known and well-mitigated risk in previous sprints always tends to decrease. Knowing this, risks identified during the project tend to have a high impact and need immediate action. Follows the table for identified risks: id Risk Risk response RS001 Team integration Provide constant feedback to facilitate communication and the constant monitoring of members; RS002 Team commitment Increase the sense of integration between members; Treat individually with the member; Communicate with the teacher in extreme cases RS003 Temporary unavailability of members Warn of setbacks and maintain effective communication between members RS004 Withdrawal of discipline Constant communication between the members; Transparency with team members; Scope replanning to match remaining productivity capacity RS005 Delays in meetings Schedule meetings in advance to avoid hitting schedules with other members' appointments; Individual conversation; RS006 Scope change Constant feedback with the MIT team, through meetings; Search for new alternatives for eliciting requirements RS007 Environment setup Assist the member with difficulty in setting up the machine; Using Docker RS008 Architecture change Creates a resilient and adaptable architecture that is prepared for change RS009 Services integration Study the service documentation RS010 Continuous delivery Define pipeline RS011 Continuous integration Define pipeline RS012 Technical difficulty Constant and effective communication between members Choosing tools that have a good learning curve","title":"Risk Plan"},{"location":"base/documentation/riskPlan/#references","text":"[Moodle] Serrano, Milene. V\u00eddeo Aula : Plano de Riscos.","title":"References"},{"location":"base/documentation/riskPlan/#document-versioning","text":"Date Author(s) Description Version 09/06/2020 Ygor Galeno Document creation 0.1 09/07/2020 Ygor Galeno Finish document 0.2","title":"Document Versioning"},{"location":"base/methodology/Methodology/","text":"Methodology In this project, the group chooses to follow a combination of methodologies. The chosen ones are: Scrum, XP, Kanban. Of course that only a share of each one of them were used, those which better fits with the project and development situation. Scrum According with the creators and maintainers of the methodology and their website, Scrum is a framework that helps teams work together. Scrum itself is a simple framework for effective team collaboration on complex products. This definition consists of Scrum\u2019s roles, events, artifacts, and the rules that bind them together. Much like a rugby team (where it gets its name) training for the big game, Scrum encourages teams to learn through experiences, self-organize while working on a problem, and reflect on their wins and losses to continuously improve. For this project we are going to use some rotated posts from scrum as PO, SM, developers and sprints, besides the product backlog. XP Extreme Programming is a popular agile process. It has already proven to be very successful in many companies of all sizes and sectors around the world. This process is successful because it emphasizes customer satisfaction. Instead of delivering everything you could possibly want at a distant date in the future, this process provides the software you need as needed. Extreme Programming allows its developers to respond with confidence to changes in customer requirements, even at the end of the life cycle. At this project, XP is present in our planning time, listening and focused at client satisfation. For the group this will increse the feedback number and the final project quality. Kanban Kanban is a popular framework used to implement Agile software development. It requires real-time capacity communication and full transparency of work. Work items are represented visually in a Kanban board, allowing team members to see the status of each part of the job at any time. At this project we used ZenHub plug-in to help us with the to do board with tasks that we are going to do during each sprint. References [Moodle] Serrano, Milene. V\u00eddeo Aula : Scrum. [WebSite] https://www.atlassian.com/agile/scrum [WebSite] https://www.scrum.org/resources/what-is-scrum [Moodle] Serrano, Milene. V\u00eddeo Aula : XP. [WebSite] http://www.extremeprogramming.org/ [Moodle] Serrano, Milene. V\u00eddeo Aula : Kanban. [WebSite] https://www.atlassian.com/br/agile/kanban Document Versioning Date Author(s) Description Version 09/10/2020 Guilherme Deusdar\u00e1, Vitor Meireles Creates the page and adds Scrum 1.0 10/10/2020 Vitor Meireles Add Xp and Kanban info 1.1","title":"Methodology"},{"location":"base/methodology/Methodology/#methodology","text":"In this project, the group chooses to follow a combination of methodologies. The chosen ones are: Scrum, XP, Kanban. Of course that only a share of each one of them were used, those which better fits with the project and development situation.","title":"Methodology"},{"location":"base/methodology/Methodology/#scrum","text":"According with the creators and maintainers of the methodology and their website, Scrum is a framework that helps teams work together. Scrum itself is a simple framework for effective team collaboration on complex products. This definition consists of Scrum\u2019s roles, events, artifacts, and the rules that bind them together. Much like a rugby team (where it gets its name) training for the big game, Scrum encourages teams to learn through experiences, self-organize while working on a problem, and reflect on their wins and losses to continuously improve. For this project we are going to use some rotated posts from scrum as PO, SM, developers and sprints, besides the product backlog.","title":"Scrum"},{"location":"base/methodology/Methodology/#xp","text":"Extreme Programming is a popular agile process. It has already proven to be very successful in many companies of all sizes and sectors around the world. This process is successful because it emphasizes customer satisfaction. Instead of delivering everything you could possibly want at a distant date in the future, this process provides the software you need as needed. Extreme Programming allows its developers to respond with confidence to changes in customer requirements, even at the end of the life cycle. At this project, XP is present in our planning time, listening and focused at client satisfation. For the group this will increse the feedback number and the final project quality.","title":"XP"},{"location":"base/methodology/Methodology/#kanban","text":"Kanban is a popular framework used to implement Agile software development. It requires real-time capacity communication and full transparency of work. Work items are represented visually in a Kanban board, allowing team members to see the status of each part of the job at any time. At this project we used ZenHub plug-in to help us with the to do board with tasks that we are going to do during each sprint.","title":"Kanban"},{"location":"base/methodology/Methodology/#references","text":"[Moodle] Serrano, Milene. V\u00eddeo Aula : Scrum. [WebSite] https://www.atlassian.com/agile/scrum [WebSite] https://www.scrum.org/resources/what-is-scrum [Moodle] Serrano, Milene. V\u00eddeo Aula : XP. [WebSite] http://www.extremeprogramming.org/ [Moodle] Serrano, Milene. V\u00eddeo Aula : Kanban. [WebSite] https://www.atlassian.com/br/agile/kanban","title":"References"},{"location":"base/methodology/Methodology/#document-versioning","text":"Date Author(s) Description Version 09/10/2020 Guilherme Deusdar\u00e1, Vitor Meireles Creates the page and adds Scrum 1.0 10/10/2020 Vitor Meireles Add Xp and Kanban info 1.1","title":"Document Versioning"},{"location":"base/methodology/bpmn_methodology/","text":"Modeling of Methodologies Description To carry out the discipline of Architecture and Software Design, it was decided to perform the BPMN modeling considering the whole discipline and its intermediary deliverables. For this, it was modeled using Bizagi software following BPMN standards. As the project is in its initial stages, some stages were not developed due to lack of knowledge of the team through subsequent stages of the discipline, but they will be developed before the stage occurs. General Modeling Author : Gabriel Filipe Version: 1.0 PROCESS - Initial Elaboration of Artifacts Author : Gabriel Filipe Version: 1.0 SUBPROCESS - Project Definition Author : Guilherme Deusdar\u00e1 Version: 1.0 SUBPROCESS - Development Methodology Author : Mikhaelle Bueno Version: 1.0 SUBPROCESS - Sprint Planning Author : Guilherme Deusdar\u00e1 Version: 1.0 SUBPROCESS - Sprint Retrospective/Review Author : Mikhaelle Bueno Version: 1.0 SUBPROCESS - Design Pattern Implementation Author : Mikhaelle Bueno Version: 1.0 PROCESS - System Architecture Description Author : Gabriel Filipe Version: 1.0 References FLOWERS, Robert; EDEKI, Charles. Business Process Modeling Notation. International Journal of Computer Science and Mobile Computing, [s. l.], v. 2, p. 35 \u2013 40, 1 mar. 2013 (https://pdfs.semanticscholar.org/5ef9/417be5caaebd3e2a2445e2262968c19d3976.pdf) TRIBUNAL DE CONTAS DA UNI\u00c3O. Curso de Mapeamento de Processos de Trabalho com BPMN e Bizagi. [S. l.: s. n.], 2013. Document Versioning Date Author(s) Descri\u00e7\u00e3o Vers\u00e3o 09/10/2020 Gabriel Filipe General Modeling 0.1 09/10/2020 Gabriel Filipe PROCESS - Initial Elaboration of Artifacts 0.1 09/10/2020 Gabriel Filipe System Architecture Description 0.1 09/10/2020 Guilherme Deusdar\u00e1 SUBPROCESS - Project Definition 0.1 09/10/2020 Guilherme Deusdar\u00e1 Sprint Planning 0.1 09/10/2020 Mikhaelle Bueno SUBPROCESS - Development Methodology 0.1 09/10/2020 Mikhaelle Bueno Sprint Retrospective/Review 0.1 09/10/2020 Mikhaelle Bueno SUBPROCESS - Design Pattern Implementation 0.1","title":"Modeling of Methodologies"},{"location":"base/methodology/bpmn_methodology/#modeling-of-methodologies","text":"","title":"Modeling of Methodologies"},{"location":"base/methodology/bpmn_methodology/#description","text":"To carry out the discipline of Architecture and Software Design, it was decided to perform the BPMN modeling considering the whole discipline and its intermediary deliverables. For this, it was modeled using Bizagi software following BPMN standards. As the project is in its initial stages, some stages were not developed due to lack of knowledge of the team through subsequent stages of the discipline, but they will be developed before the stage occurs.","title":"Description"},{"location":"base/methodology/bpmn_methodology/#general-modeling","text":"Author : Gabriel Filipe Version: 1.0","title":"General Modeling"},{"location":"base/methodology/bpmn_methodology/#process-initial-elaboration-of-artifacts","text":"Author : Gabriel Filipe Version: 1.0","title":"PROCESS - Initial Elaboration of Artifacts"},{"location":"base/methodology/bpmn_methodology/#subprocess-project-definition","text":"Author : Guilherme Deusdar\u00e1 Version: 1.0","title":"SUBPROCESS - Project Definition"},{"location":"base/methodology/bpmn_methodology/#subprocess-development-methodology","text":"Author : Mikhaelle Bueno Version: 1.0","title":"SUBPROCESS - Development Methodology"},{"location":"base/methodology/bpmn_methodology/#subprocess-sprint-planning","text":"Author : Guilherme Deusdar\u00e1 Version: 1.0","title":"SUBPROCESS - Sprint Planning"},{"location":"base/methodology/bpmn_methodology/#subprocess-sprint-retrospectivereview","text":"Author : Mikhaelle Bueno Version: 1.0","title":"SUBPROCESS - Sprint Retrospective/Review"},{"location":"base/methodology/bpmn_methodology/#subprocess-design-pattern-implementation","text":"Author : Mikhaelle Bueno Version: 1.0","title":"SUBPROCESS - Design Pattern Implementation"},{"location":"base/methodology/bpmn_methodology/#process-system-architecture-description","text":"Author : Gabriel Filipe Version: 1.0","title":"PROCESS - System Architecture Description"},{"location":"base/methodology/bpmn_methodology/#references","text":"FLOWERS, Robert; EDEKI, Charles. Business Process Modeling Notation. International Journal of Computer Science and Mobile Computing, [s. l.], v. 2, p. 35 \u2013 40, 1 mar. 2013 (https://pdfs.semanticscholar.org/5ef9/417be5caaebd3e2a2445e2262968c19d3976.pdf) TRIBUNAL DE CONTAS DA UNI\u00c3O. Curso de Mapeamento de Processos de Trabalho com BPMN e Bizagi. [S. l.: s. n.], 2013.","title":"References"},{"location":"base/methodology/bpmn_methodology/#document-versioning","text":"Date Author(s) Descri\u00e7\u00e3o Vers\u00e3o 09/10/2020 Gabriel Filipe General Modeling 0.1 09/10/2020 Gabriel Filipe PROCESS - Initial Elaboration of Artifacts 0.1 09/10/2020 Gabriel Filipe System Architecture Description 0.1 09/10/2020 Guilherme Deusdar\u00e1 SUBPROCESS - Project Definition 0.1 09/10/2020 Guilherme Deusdar\u00e1 Sprint Planning 0.1 09/10/2020 Mikhaelle Bueno SUBPROCESS - Development Methodology 0.1 09/10/2020 Mikhaelle Bueno Sprint Retrospective/Review 0.1 09/10/2020 Mikhaelle Bueno SUBPROCESS - Design Pattern Implementation 0.1","title":"Document Versioning"},{"location":"base/requirements/elicitation/brainstorm/","text":"BrainStorm Brainstorming as a technique has a creative character and it can be practiced individually or in a group. The concept of brainstorming includes defining a simple or a complex problem for which solution are generated different ideas that are later accepted or rejected. The participants in the process of brainstorming present and reveal new ideas as potential solutions for a specific problem. In this process, brainstorming helps the stimulation of the human mind towards creative problem-solving. References [ Website ] WHAT IS BRAINSTORMING AND HOW IS IT HELPFUL?, iMindQ Versioning of this page Date Author(s) Description Version 09/10/20 Gabriel Filipe, Guilherme Deusdar\u00e1, Lorrany Azevedo, Ygor Galeno, Mikhaelle Bueno e Vitor Meireles Document creation 0.1 09/11/20 Gabriel Filipe Adds description 0.1","title":"Brainstorm"},{"location":"base/requirements/elicitation/brainstorm/#brainstorm","text":"Brainstorming as a technique has a creative character and it can be practiced individually or in a group. The concept of brainstorming includes defining a simple or a complex problem for which solution are generated different ideas that are later accepted or rejected. The participants in the process of brainstorming present and reveal new ideas as potential solutions for a specific problem. In this process, brainstorming helps the stimulation of the human mind towards creative problem-solving.","title":"BrainStorm"},{"location":"base/requirements/elicitation/brainstorm/#references","text":"[ Website ] WHAT IS BRAINSTORMING AND HOW IS IT HELPFUL?, iMindQ","title":"References"},{"location":"base/requirements/elicitation/brainstorm/#versioning-of-this-page","text":"Date Author(s) Description Version 09/10/20 Gabriel Filipe, Guilherme Deusdar\u00e1, Lorrany Azevedo, Ygor Galeno, Mikhaelle Bueno e Vitor Meireles Document creation 0.1 09/11/20 Gabriel Filipe Adds description 0.1","title":"Versioning of this page"},{"location":"base/requirements/elicitation/moscow/","text":"Versionamento de edi\u00e7\u00f5es desta p\u00e1gina MoSCoW The MoSCoW method is a prioritization technique used in management, business analysis, project management, and software development to reach a common understanding with stakeholders on the importance they place on the delivery of each requirement; it is also known as MoSCoW prioritization or MoSCoW analysis. Users Requirements Type Must Should Could Would Create new users Functional x Sign in Functional x Subscribe for new updates Functional x Know how to contribute Functional x Manage my account Functional x View my visualization history Functional x View my submit history Functional x View my review history Functional x Graphs Requirements Type Must Should Could Would View graphs of performance for year Functional x View graphs of performance for computing power Functional x Download graphs Functional x Request site to use graphs in another place Functional x View graphs in different types Functional x Search Requirements Type Must Should Could Would View domains Functional x Filter search by domain Functional x Filter search by title Functional x Filter search by keyword Functional x Filter search by year Functional x Order list by ranking Functional x Order list by year Functional x Submission Requirements Type Must Should Could Would Create submission Functional x Remove submission Functional x Edit submission Functional x View my submissions Functional x View submission status Functional x Review Requirements Type Must Should Could Would Set date for validate submission Functional x Contest submission Functional x Admin users can see all submissions Functional x Accept and publish submission Functional x References [Moodle] Serrano, Milene. V\u00eddeo Aula : MoSCoW. [ ScrumDesc ] MoSCoW prioritization of the product backlog Document Versioning Date Author(s) Description Version 09/09/2020 Guilherme Deusdar\u00e1, Vitor Meireles, Ygor Galeno Page creation 0.1 09/09/2020 Guilherme Deusdar\u00e1, Vitor Meireles, Ygor Galeno Topics creation 0.2 09/09/2020 Guilherme Deusdar\u00e1 Updating document patterns 0.3","title":"MoSCoW"},{"location":"base/requirements/elicitation/moscow/#versionamento-de-edicoes-desta-pagina","text":"","title":"Versionamento de edi\u00e7\u00f5es desta p\u00e1gina"},{"location":"base/requirements/elicitation/moscow/#moscow","text":"The MoSCoW method is a prioritization technique used in management, business analysis, project management, and software development to reach a common understanding with stakeholders on the importance they place on the delivery of each requirement; it is also known as MoSCoW prioritization or MoSCoW analysis.","title":"MoSCoW"},{"location":"base/requirements/elicitation/moscow/#users","text":"Requirements Type Must Should Could Would Create new users Functional x Sign in Functional x Subscribe for new updates Functional x Know how to contribute Functional x Manage my account Functional x View my visualization history Functional x View my submit history Functional x View my review history Functional x","title":"Users"},{"location":"base/requirements/elicitation/moscow/#graphs","text":"Requirements Type Must Should Could Would View graphs of performance for year Functional x View graphs of performance for computing power Functional x Download graphs Functional x Request site to use graphs in another place Functional x View graphs in different types Functional x","title":"Graphs"},{"location":"base/requirements/elicitation/moscow/#search","text":"Requirements Type Must Should Could Would View domains Functional x Filter search by domain Functional x Filter search by title Functional x Filter search by keyword Functional x Filter search by year Functional x Order list by ranking Functional x Order list by year Functional x","title":"Search"},{"location":"base/requirements/elicitation/moscow/#submission","text":"Requirements Type Must Should Could Would Create submission Functional x Remove submission Functional x Edit submission Functional x View my submissions Functional x View submission status Functional x","title":"Submission"},{"location":"base/requirements/elicitation/moscow/#review","text":"Requirements Type Must Should Could Would Set date for validate submission Functional x Contest submission Functional x Admin users can see all submissions Functional x Accept and publish submission Functional x","title":"Review"},{"location":"base/requirements/elicitation/moscow/#references","text":"[Moodle] Serrano, Milene. V\u00eddeo Aula : MoSCoW. [ ScrumDesc ] MoSCoW prioritization of the product backlog","title":"References"},{"location":"base/requirements/elicitation/moscow/#document-versioning","text":"Date Author(s) Description Version 09/09/2020 Guilherme Deusdar\u00e1, Vitor Meireles, Ygor Galeno Page creation 0.1 09/09/2020 Guilherme Deusdar\u00e1, Vitor Meireles, Ygor Galeno Topics creation 0.2 09/09/2020 Guilherme Deusdar\u00e1 Updating document patterns 0.3","title":"Document Versioning"},{"location":"base/requirements/elicitation/storyBoard/","text":"Story Board A storyboard is a graphic organizer that consists of illustrations or images displayed in sequence for the purpose of pre-visualising a motion picture, animation, motion graphic or interactive media sequence. The storyboarding process, in the form it is known today, was developed at Walt Disney Productions during the early 1930s, after several years of similar processes being in use at Walt Disney and other animation studios. Conversation with TB about the lack of data report Author : Gabriel Filipe Version: 1.0 Conversation with Neil about the website creation Author : Gabriel Filipe Version: 1.0 Conversation between Cree and Martha about data accessibility Author : Gabriel Filipe Version: 1.0 References [WebSite] https://www.storyboardthat.com/pt [WebSite] https://en.wikipedia.org/wiki/Storyboard Document Versioning Date Author(s) Description Version 07/07/2020 Gabriel Filipe Creates the page and adds TB conversation 1.0 08/07/2020 Gabriel Filipe Adds Neil conversation 1.1 09/07/2020 Gabriel Filipe Adds Cree conversation 1.2","title":"Story Board"},{"location":"base/requirements/elicitation/storyBoard/#story-board","text":"A storyboard is a graphic organizer that consists of illustrations or images displayed in sequence for the purpose of pre-visualising a motion picture, animation, motion graphic or interactive media sequence. The storyboarding process, in the form it is known today, was developed at Walt Disney Productions during the early 1930s, after several years of similar processes being in use at Walt Disney and other animation studios.","title":"Story Board"},{"location":"base/requirements/elicitation/storyBoard/#conversation-with-tb-about-the-lack-of-data-report","text":"Author : Gabriel Filipe Version: 1.0","title":"Conversation with TB about the lack of data report"},{"location":"base/requirements/elicitation/storyBoard/#conversation-with-neil-about-the-website-creation","text":"Author : Gabriel Filipe Version: 1.0","title":"Conversation with Neil about the website creation"},{"location":"base/requirements/elicitation/storyBoard/#conversation-between-cree-and-martha-about-data-accessibility","text":"Author : Gabriel Filipe Version: 1.0","title":"Conversation between Cree and Martha about data accessibility"},{"location":"base/requirements/elicitation/storyBoard/#references","text":"[WebSite] https://www.storyboardthat.com/pt [WebSite] https://en.wikipedia.org/wiki/Storyboard","title":"References"},{"location":"base/requirements/elicitation/storyBoard/#document-versioning","text":"Date Author(s) Description Version 07/07/2020 Gabriel Filipe Creates the page and adds TB conversation 1.0 08/07/2020 Gabriel Filipe Adds Neil conversation 1.1 09/07/2020 Gabriel Filipe Adds Cree conversation 1.2","title":"Document Versioning"},{"location":"base/requirements/modeling/NFR-framework/","text":"NFR Framework The NFR Framework helps developers deal with non-functional requirements (NFRs) during software development. The Framework helps developers express NFRs explicitly, deal with them systematically, and use them to drive the software development process rationally. Author : Guilherme Deusdar\u00e1 Version: 0.1 References Chung L., Nixon B.A., Yu E., Mylopoulos J. (2000) The NFR Framework in Action. In: Non-Functional Requirements in Software Engineering. International Series in Software Engineering, vol 5. Springer, Boston, MA Document Versioning Date Author(s) Description Version 09/03/2020 Guilherme Deusdar\u00e1 Creates page and adds first version 0.1","title":"NFR framework"},{"location":"base/requirements/modeling/NFR-framework/#nfr-framework","text":"The NFR Framework helps developers deal with non-functional requirements (NFRs) during software development. The Framework helps developers express NFRs explicitly, deal with them systematically, and use them to drive the software development process rationally. Author : Guilherme Deusdar\u00e1 Version: 0.1","title":"NFR Framework"},{"location":"base/requirements/modeling/NFR-framework/#references","text":"Chung L., Nixon B.A., Yu E., Mylopoulos J. (2000) The NFR Framework in Action. In: Non-Functional Requirements in Software Engineering. International Series in Software Engineering, vol 5. Springer, Boston, MA","title":"References"},{"location":"base/requirements/modeling/NFR-framework/#document-versioning","text":"Date Author(s) Description Version 09/03/2020 Guilherme Deusdar\u00e1 Creates page and adds first version 0.1","title":"Document Versioning"},{"location":"base/requirements/modeling/backlog/","text":"Product Backlog A Product Backlog is a list of the new features, changes to existing features, bug fixes, infrastructure changes or other activities that a team may deliver in order to achieve a specific outcome. The product backlog is the single authoritative source for things that a team works on. Backlog Epics Data Visualization Data Creation Document Versioning Date Author(s) Description Version 09/10/2020 Guilherme Deusdar\u00e1 Creates the page and adds Backlog Epics 1.0 09/10/2020 Guilherme Deusdar\u00e1 updating paths 2.0","title":"Backlog"},{"location":"base/requirements/modeling/backlog/#product-backlog","text":"A Product Backlog is a list of the new features, changes to existing features, bug fixes, infrastructure changes or other activities that a team may deliver in order to achieve a specific outcome. The product backlog is the single authoritative source for things that a team works on.","title":"Product Backlog"},{"location":"base/requirements/modeling/backlog/#backlog-epics","text":"Data Visualization Data Creation","title":"Backlog Epics"},{"location":"base/requirements/modeling/backlog/#document-versioning","text":"Date Author(s) Description Version 09/10/2020 Guilherme Deusdar\u00e1 Creates the page and adds Backlog Epics 1.0 09/10/2020 Guilherme Deusdar\u00e1 updating paths 2.0","title":"Document Versioning"},{"location":"base/requirements/modeling/glossary/","text":"Glossary Accuracy Author : Lorrany Azevedo Version: 0.1 Description: In the context of machine learning , accuracy refers to the percentage of correct predictions that a model obtained after training a data set. Synonym: error rate Example: In the below example we have an input with two dogs and two cats. Our model classified our input data set as three dogs and one cat. So the accuracy of our model is 2/4 = 0.5% or 50%. Artificial Neural Network Author : Lorrany Azevedo Version: 0.1 Description: An artificial neural network is a computational structure that tries to mimic the biological neural networks of animals, ANN'S are made up of nodes that mimic the neurons of a biological brain. Synonym: ANN Example: Artificial Intelligence Author : Lorrany Azevedo Version: 0.1 Description: Artificial Intelligence ( AI ) is a broad branch of computer science that is concerned with designing an intelligent compartment in agents that can be diverse (computers, cars, etc.). Artificial Intelligence seeks to understand the processes of the human mind and tries to make these agents have intelligent behavior, which in turn involves reasoning, learning and other behaviors associated with human intelligence. Synonym: AI, computational intelligence Computational Power Author : Lorrany Azevedo Version: 0.1 Classification: Data processing capacity, also known as cpu power, this processing power involves aspects of hardware and computational architecture. Synonym: computing capacity, processing capacity Deep Neural Network Author : Lorrany Azevedo Version: 0.1 Description: Deep neural networks are artificial neural networks ( ANN ) with many layers between an input layer and an output layer, give them the name DNN . Synonym: DNN Example: (Image Font: Link ) Deep Learning Author : Lorrany Azevedo Version: 0.1 Description: Deep learning is a subset of the machine learning field, that tries to imitate the functioning of the human brain in data processing, and in creating patterns for making decisions. This learning can be supervised, semi-supervised, or unsupervised, and it takes place through artificial neural networks that mimic the neural networks of the human brain. Synonym: DL, deep structured learning Machine Learning Author : Lorrany Azevedo Version: 0.1 Description: Machine learning is one of the fields of ( AI ) that seeks to make systems go through learning processes without being explicitly programmed for this, this is the main difference between ( ML e DL ). Synonym: ML Ranking Author : Lorrany Azevedo Version: 0.1 Description: In the context of this documentation, the ranking will be the ordering of papers according to their score, which will be defined through their accuracy Synonym: classify, rate Prediction Author : Lorrany Azevedo Version: 0.1 Classification: Output of a model after being trained and having a data set as input, basically a prediction is how the model classifies the input data. We can also say that prediction is a way of predicting the results of a given model. Synonym: forecast Example: Simply, a good example of how we use model's predictions are the investment robots that operate in the financial market, making predictions about falls and highs in the market and helping investors to know the best time to make an investment. References [Moodle] Serrano, Maur\u00edcio. Serrano, Milene. Aula 10: Cen\u00e1rios e L\u00e9xicos. [Moodle] Serrano, Milene. V\u00eddeo Aula : Gloss\u00e1rio e L\u00e9xicos. [Paper] Definition of AI as the study of intelligent agents: Poole, Mackworth & Goebel 1998, p. 1 [WebSite] https://www.datarobot.com/wiki/prediction/ [Deep-learning-class] https://docs.google.com/presentation/d/1kRGy-h6p5dvQqco2QBXUHeterOzu-HOAwWfZc8Odci8/edit#slide=id.g55051d9455_0_13 [WebSite] http://web.mit.edu/rhel-doc/4/RH-DOCS/rhel-isa-pt_br-4/s1-bandwidth-processing.html Document Versioning Date Author(s) Descri\u00e7\u00e3o Vers\u00e3o 09/09/2020 Lorrany Azevedo Creating the page and adding the terms 0.1","title":"Glossary"},{"location":"base/requirements/modeling/glossary/#glossary","text":"","title":"Glossary"},{"location":"base/requirements/modeling/glossary/#accuracy","text":"Author : Lorrany Azevedo Version: 0.1 Description: In the context of machine learning , accuracy refers to the percentage of correct predictions that a model obtained after training a data set. Synonym: error rate Example: In the below example we have an input with two dogs and two cats. Our model classified our input data set as three dogs and one cat. So the accuracy of our model is 2/4 = 0.5% or 50%.","title":"Accuracy"},{"location":"base/requirements/modeling/glossary/#artificial-neural-network","text":"Author : Lorrany Azevedo Version: 0.1 Description: An artificial neural network is a computational structure that tries to mimic the biological neural networks of animals, ANN'S are made up of nodes that mimic the neurons of a biological brain. Synonym: ANN Example:","title":"Artificial Neural Network"},{"location":"base/requirements/modeling/glossary/#artificial-intelligence","text":"Author : Lorrany Azevedo Version: 0.1 Description: Artificial Intelligence ( AI ) is a broad branch of computer science that is concerned with designing an intelligent compartment in agents that can be diverse (computers, cars, etc.). Artificial Intelligence seeks to understand the processes of the human mind and tries to make these agents have intelligent behavior, which in turn involves reasoning, learning and other behaviors associated with human intelligence. Synonym: AI, computational intelligence","title":"Artificial Intelligence"},{"location":"base/requirements/modeling/glossary/#computational-power","text":"Author : Lorrany Azevedo Version: 0.1 Classification: Data processing capacity, also known as cpu power, this processing power involves aspects of hardware and computational architecture. Synonym: computing capacity, processing capacity","title":"Computational Power"},{"location":"base/requirements/modeling/glossary/#deep-neural-network","text":"Author : Lorrany Azevedo Version: 0.1 Description: Deep neural networks are artificial neural networks ( ANN ) with many layers between an input layer and an output layer, give them the name DNN . Synonym: DNN Example: (Image Font: Link )","title":"Deep Neural Network"},{"location":"base/requirements/modeling/glossary/#deep-learning","text":"Author : Lorrany Azevedo Version: 0.1 Description: Deep learning is a subset of the machine learning field, that tries to imitate the functioning of the human brain in data processing, and in creating patterns for making decisions. This learning can be supervised, semi-supervised, or unsupervised, and it takes place through artificial neural networks that mimic the neural networks of the human brain. Synonym: DL, deep structured learning","title":"Deep Learning"},{"location":"base/requirements/modeling/glossary/#machine-learning","text":"Author : Lorrany Azevedo Version: 0.1 Description: Machine learning is one of the fields of ( AI ) that seeks to make systems go through learning processes without being explicitly programmed for this, this is the main difference between ( ML e DL ). Synonym: ML","title":"Machine Learning"},{"location":"base/requirements/modeling/glossary/#ranking","text":"Author : Lorrany Azevedo Version: 0.1 Description: In the context of this documentation, the ranking will be the ordering of papers according to their score, which will be defined through their accuracy Synonym: classify, rate","title":"Ranking"},{"location":"base/requirements/modeling/glossary/#prediction","text":"Author : Lorrany Azevedo Version: 0.1 Classification: Output of a model after being trained and having a data set as input, basically a prediction is how the model classifies the input data. We can also say that prediction is a way of predicting the results of a given model. Synonym: forecast Example: Simply, a good example of how we use model's predictions are the investment robots that operate in the financial market, making predictions about falls and highs in the market and helping investors to know the best time to make an investment.","title":"Prediction"},{"location":"base/requirements/modeling/glossary/#references","text":"[Moodle] Serrano, Maur\u00edcio. Serrano, Milene. Aula 10: Cen\u00e1rios e L\u00e9xicos. [Moodle] Serrano, Milene. V\u00eddeo Aula : Gloss\u00e1rio e L\u00e9xicos. [Paper] Definition of AI as the study of intelligent agents: Poole, Mackworth & Goebel 1998, p. 1 [WebSite] https://www.datarobot.com/wiki/prediction/ [Deep-learning-class] https://docs.google.com/presentation/d/1kRGy-h6p5dvQqco2QBXUHeterOzu-HOAwWfZc8Odci8/edit#slide=id.g55051d9455_0_13 [WebSite] http://web.mit.edu/rhel-doc/4/RH-DOCS/rhel-isa-pt_br-4/s1-bandwidth-processing.html","title":"References"},{"location":"base/requirements/modeling/glossary/#document-versioning","text":"Date Author(s) Descri\u00e7\u00e3o Vers\u00e3o 09/09/2020 Lorrany Azevedo Creating the page and adding the terms 0.1","title":"Document Versioning"},{"location":"base/requirements/modeling/lexicons/","text":"Lexicons 0.1 Deep Learning Author : Lorrany Azevedo Version: 0.1 Name: deep learning Connotation: - The user can interact with the most talked about subjects ( trending topics); -The user can perform a tweet related to some trending topic; Classification: Object Denotation: Deep learning is a subset of the machine learning field, that tries to imitate the functioning of the human brain in Data processing, and in creating patterns for making decisions. This learning can be supervised, semi-supervised, or unsupervised, and it takes place through artificial neural networks that mimic the neural networks of the human brain. Synonym: DL, deep structured learning Scalability Author : Mikhaelle Bueno Version: 0.1 Name: scalability Connotation: - The website must be scalable to the point that it can receive new modifications and contributions from the community - scalability in startups is a way to accelerate the growth of a company, with small costs and very quickly. Classification: state Denotation: Software scalability is the capability of a system to handle an increasing amount of work or its ability to accommodate growth. scalability is a crucial quality in ERP software given the future growth generated by streamlined operational Performance and maximized productivity Synonym: expansible, expandable, extensible Graphs Author : Mikhaelle Bueno Version: 0.1 Name: Graphs Connotation: - Plot or trace on a graph - Graphical presentation to present the Data in an interpretable way. - This chart shows the growth of the company - Graph represents the scalability per time Classification: Object Denotation: Graphs are a common method to visually illustrate relationships in the Data . The purpose of a graph is to present Data that are too numerous or complicated to be described adequately in the text and in less space. Synonym: chart, diagram Data Author : Mikhaelle Bueno Version: 0.1 Name: Data Connotation: - These Data refers to the number of people infected - The paper bring some Data about Machine Translation Classification: Object Denotation: A collection of facts (numbers, words, measurements, observations, etc) that has been translated into a form that computers can process Synonym: estatistcs, information, input Domain Author : Mikhaelle Bueno Version: 0.1 Name: Domain Connotation: - This information should be in the public Domain . - The great experimenters in the Domain of art - He lectured on the Domain of physics - The deep learning has a lot of Domains , for example Machine Translation Classification: Object Denotation: - A specified sphere of activity or knowledge - A Domain is a particular field of thought, activity, or interest, especially one over which someone has control, influence, or rights. Synonym: area Paper Author : Mikhaelle Bueno Version: 0.1 Name: Paper Connotation: - According to an Paper in The Economist the drug could have side effects - This Paper have some Data about Machine Translation Classification: Object Denotation: - An essay or thesis, especially one read at an academic lecture or seminar or published in an academic journal - An article is a piece of writing that is published in a newspaper or magazine. Synonym: article, essay Update Author : Mikhaelle Bueno Version: 0.1 Name: Update Connotation: - Keep someone informed of the latest developments or news -He was back in the office, updating the work schedule on the computer. - They released another Paper and Updated the Data Classification: Verb Denotation: make (something) more modern or up to date Synonym: modernize, up to date Limits Author : Mikhaelle Bueno Version: 0.1 Name: Limits Connotation: - The sugar pot is full until the lid is at the Limits - I'm at the Limits of my patience - We have reached the limit of possible space for construction Classification: Object Denotation: - A restriction on the size or amount of something permissible or possible - The maximum extent of a place Synonym: restriction Submission Author : Mikhaelle Bueno Version: 0.1 Name: Submission Connotation: - Diploma and certificate courses do not normally require the Submission of a dissertation - For your Papers to be approved you must submit it to a journal - Collaborators must submit Paper for evaluation Classification: Object Denotation: - The action of presenting a proposal, application, or other document for consideration or judgment. - A proposal, application, or other document presented for consideration or judgement. Synonym: proposal, presentation Review Author : Mikhaelle Bueno Version: 0.1 Name: Review Connotation: - They have an annual Review with their financial planner to assess whether or not their policies are still suitable. - I finished a chapter of the book and sent it to a friend to Review Classification: Object Denotation: a formal assessment or examination of something with the possibility or intention of instituting change if necessary Synonym: analysis, evaluation Users Author : Mikhaelle Bueno Version: 0.1 Name: Users Connotation: - Person who can view the website - Person who can search Papers - Person who can search Data - Person who can become a collaborator Classification: Object Denotation: - Person using the website - Person viewing the Data and articles on the website Synonym: enjoyers, customer Collaborators Author : Mikhaelle Bueno Version: 0.1 Name: Collaborators Connotation: - Person who can submit an article and Data for Review - Person who can download Data - Person who can submit a article and Data for Review - Collaborator can become a SubAdmin Classification: Object Denotation: - A person who works jointly on an activity or project; an associate. - Person who helps another person to submit a article or Data Synonym: coworker Admin Author : Mikhaelle Bueno Version: 0.1 Name: Admin Connotation: - The Admin is who can aprove or disapprove submitions - Admins can do submitions too - Admin have acess to all features in the website Classification: Object Denotation: Admin is the activity or process of organizing an institution or organization Synonym: administrator, supervisor SubAdmin Author : Mikhaelle Bueno Version: 0.1 Name: SubAdmin Connotation: - The SubAdmin have priority in Admin review papers - Admins can submit paper Classification: Object Denotation: SubAdmin derivate from Admin Synonym: Collaborators Master Visitor Author : Mikhaelle Bueno Version: 0.1 Name: Visitor Connotation: - The Visitor can view papers and data but not download - The Visitor has to become a Collaborator (create account) if he want to submit papers Classification: Object Denotation: Visitor someone who visits a person or plac or website Synonym: visitant, tourist Performance Author : Mikhaelle Bueno Version: 0.1 Name: Performance Connotation: -The Performance of the article it was extremely satisfactory - He had good public acceptance, that is, a great Performance Classification: Object Denotation: the capabilities of a machine, vehicle, or product, especially when observed under particular conditions. Synonym: capabilities, capacity benchmark Author : Mikhaelle Bueno Version: 0.1 Name: benchmark Connotation: -The machine translation have tow benchmark Classification: Object Denotation: Benchmark is an index which is used to measure a Mutual Fund's overall Performance . It provides an indicative value of how much one's investment should have earned, which can be compared against how much it has earned in reality Synonym: Specification References [Moodle] Serrano, Maur\u00edcio. Serrano, Milene. Aula 10: Cen\u00e1rios e L\u00e9xicos. [Moodle] Serrano, Milene. V\u00eddeo Aula : Gloss\u00e1rio e L\u00e9xicos. Document Versioning Date Author(s) Descri\u00e7\u00e3o Vers\u00e3o 09/05/2020 Lorrany Azevedo Page creation 0.1 09/06/2020 Mikhaelle Bueno Page edit 0.2 09/07/2020 Mikhaelle Bueno Page edit 0.3 09/10/2020 Mikhaelle Bueno Page edit 0.4 25/09/2020 Mikhaelle Bueno Page edit 1.0","title":"Lexicons"},{"location":"base/requirements/modeling/lexicons/#lexicons-01","text":"","title":"Lexicons 0.1"},{"location":"base/requirements/modeling/lexicons/#deep-learning","text":"Author : Lorrany Azevedo Version: 0.1 Name: deep learning Connotation: - The user can interact with the most talked about subjects ( trending topics); -The user can perform a tweet related to some trending topic; Classification: Object Denotation: Deep learning is a subset of the machine learning field, that tries to imitate the functioning of the human brain in Data processing, and in creating patterns for making decisions. This learning can be supervised, semi-supervised, or unsupervised, and it takes place through artificial neural networks that mimic the neural networks of the human brain. Synonym: DL, deep structured learning","title":"Deep Learning"},{"location":"base/requirements/modeling/lexicons/#scalability","text":"Author : Mikhaelle Bueno Version: 0.1 Name: scalability Connotation: - The website must be scalable to the point that it can receive new modifications and contributions from the community - scalability in startups is a way to accelerate the growth of a company, with small costs and very quickly. Classification: state Denotation: Software scalability is the capability of a system to handle an increasing amount of work or its ability to accommodate growth. scalability is a crucial quality in ERP software given the future growth generated by streamlined operational Performance and maximized productivity Synonym: expansible, expandable, extensible","title":"Scalability"},{"location":"base/requirements/modeling/lexicons/#graphs","text":"Author : Mikhaelle Bueno Version: 0.1 Name: Graphs Connotation: - Plot or trace on a graph - Graphical presentation to present the Data in an interpretable way. - This chart shows the growth of the company - Graph represents the scalability per time Classification: Object Denotation: Graphs are a common method to visually illustrate relationships in the Data . The purpose of a graph is to present Data that are too numerous or complicated to be described adequately in the text and in less space. Synonym: chart, diagram","title":"Graphs"},{"location":"base/requirements/modeling/lexicons/#data","text":"Author : Mikhaelle Bueno Version: 0.1 Name: Data Connotation: - These Data refers to the number of people infected - The paper bring some Data about Machine Translation Classification: Object Denotation: A collection of facts (numbers, words, measurements, observations, etc) that has been translated into a form that computers can process Synonym: estatistcs, information, input","title":"Data"},{"location":"base/requirements/modeling/lexicons/#domain","text":"Author : Mikhaelle Bueno Version: 0.1 Name: Domain Connotation: - This information should be in the public Domain . - The great experimenters in the Domain of art - He lectured on the Domain of physics - The deep learning has a lot of Domains , for example Machine Translation Classification: Object Denotation: - A specified sphere of activity or knowledge - A Domain is a particular field of thought, activity, or interest, especially one over which someone has control, influence, or rights. Synonym: area","title":"Domain"},{"location":"base/requirements/modeling/lexicons/#paper","text":"Author : Mikhaelle Bueno Version: 0.1 Name: Paper Connotation: - According to an Paper in The Economist the drug could have side effects - This Paper have some Data about Machine Translation Classification: Object Denotation: - An essay or thesis, especially one read at an academic lecture or seminar or published in an academic journal - An article is a piece of writing that is published in a newspaper or magazine. Synonym: article, essay","title":"Paper"},{"location":"base/requirements/modeling/lexicons/#update","text":"Author : Mikhaelle Bueno Version: 0.1 Name: Update Connotation: - Keep someone informed of the latest developments or news -He was back in the office, updating the work schedule on the computer. - They released another Paper and Updated the Data Classification: Verb Denotation: make (something) more modern or up to date Synonym: modernize, up to date","title":"Update"},{"location":"base/requirements/modeling/lexicons/#limits","text":"Author : Mikhaelle Bueno Version: 0.1 Name: Limits Connotation: - The sugar pot is full until the lid is at the Limits - I'm at the Limits of my patience - We have reached the limit of possible space for construction Classification: Object Denotation: - A restriction on the size or amount of something permissible or possible - The maximum extent of a place Synonym: restriction","title":"Limits"},{"location":"base/requirements/modeling/lexicons/#submission","text":"Author : Mikhaelle Bueno Version: 0.1 Name: Submission Connotation: - Diploma and certificate courses do not normally require the Submission of a dissertation - For your Papers to be approved you must submit it to a journal - Collaborators must submit Paper for evaluation Classification: Object Denotation: - The action of presenting a proposal, application, or other document for consideration or judgment. - A proposal, application, or other document presented for consideration or judgement. Synonym: proposal, presentation","title":"Submission"},{"location":"base/requirements/modeling/lexicons/#review","text":"Author : Mikhaelle Bueno Version: 0.1 Name: Review Connotation: - They have an annual Review with their financial planner to assess whether or not their policies are still suitable. - I finished a chapter of the book and sent it to a friend to Review Classification: Object Denotation: a formal assessment or examination of something with the possibility or intention of instituting change if necessary Synonym: analysis, evaluation","title":"Review"},{"location":"base/requirements/modeling/lexicons/#users","text":"Author : Mikhaelle Bueno Version: 0.1 Name: Users Connotation: - Person who can view the website - Person who can search Papers - Person who can search Data - Person who can become a collaborator Classification: Object Denotation: - Person using the website - Person viewing the Data and articles on the website Synonym: enjoyers, customer","title":"Users"},{"location":"base/requirements/modeling/lexicons/#collaborators","text":"Author : Mikhaelle Bueno Version: 0.1 Name: Collaborators Connotation: - Person who can submit an article and Data for Review - Person who can download Data - Person who can submit a article and Data for Review - Collaborator can become a SubAdmin Classification: Object Denotation: - A person who works jointly on an activity or project; an associate. - Person who helps another person to submit a article or Data Synonym: coworker","title":"Collaborators"},{"location":"base/requirements/modeling/lexicons/#admin","text":"Author : Mikhaelle Bueno Version: 0.1 Name: Admin Connotation: - The Admin is who can aprove or disapprove submitions - Admins can do submitions too - Admin have acess to all features in the website Classification: Object Denotation: Admin is the activity or process of organizing an institution or organization Synonym: administrator, supervisor","title":"Admin"},{"location":"base/requirements/modeling/lexicons/#subadmin","text":"Author : Mikhaelle Bueno Version: 0.1 Name: SubAdmin Connotation: - The SubAdmin have priority in Admin review papers - Admins can submit paper Classification: Object Denotation: SubAdmin derivate from Admin Synonym: Collaborators Master","title":"SubAdmin"},{"location":"base/requirements/modeling/lexicons/#visitor","text":"Author : Mikhaelle Bueno Version: 0.1 Name: Visitor Connotation: - The Visitor can view papers and data but not download - The Visitor has to become a Collaborator (create account) if he want to submit papers Classification: Object Denotation: Visitor someone who visits a person or plac or website Synonym: visitant, tourist","title":"Visitor"},{"location":"base/requirements/modeling/lexicons/#performance","text":"Author : Mikhaelle Bueno Version: 0.1 Name: Performance Connotation: -The Performance of the article it was extremely satisfactory - He had good public acceptance, that is, a great Performance Classification: Object Denotation: the capabilities of a machine, vehicle, or product, especially when observed under particular conditions. Synonym: capabilities, capacity","title":"Performance"},{"location":"base/requirements/modeling/lexicons/#benchmark","text":"Author : Mikhaelle Bueno Version: 0.1 Name: benchmark Connotation: -The machine translation have tow benchmark Classification: Object Denotation: Benchmark is an index which is used to measure a Mutual Fund's overall Performance . It provides an indicative value of how much one's investment should have earned, which can be compared against how much it has earned in reality Synonym: Specification","title":" benchmark"},{"location":"base/requirements/modeling/lexicons/#references","text":"[Moodle] Serrano, Maur\u00edcio. Serrano, Milene. Aula 10: Cen\u00e1rios e L\u00e9xicos. [Moodle] Serrano, Milene. V\u00eddeo Aula : Gloss\u00e1rio e L\u00e9xicos.","title":"References"},{"location":"base/requirements/modeling/lexicons/#document-versioning","text":"Date Author(s) Descri\u00e7\u00e3o Vers\u00e3o 09/05/2020 Lorrany Azevedo Page creation 0.1 09/06/2020 Mikhaelle Bueno Page edit 0.2 09/07/2020 Mikhaelle Bueno Page edit 0.3 09/10/2020 Mikhaelle Bueno Page edit 0.4 25/09/2020 Mikhaelle Bueno Page edit 1.0","title":"Document Versioning"},{"location":"base/requirements/modeling/backlogEpics/dataCreation/","text":"Data Creation Features User User Stories id As a Want to So then I can Comment Points Priority US001 User Create account Be part of TCLDL's community username, email, password, name ? Must US002 User Read account Read my account informations username,email,password,name ? Should US003 User Edit account Edit my account informations email, name, password ? Should US004 User Delete account Remove my account from TCLDL username, email, password ? Should US005 User Sign in Have access to the functionalities of TCLDL username,email,password ? Must US006 User Log out Close application session ? Must US007 User Subscribe to email list Have news and updates from application Email ? Could US008 User Unsubscribe email Unsubscribe my subscripition email ? Could US009 User Know how to contribute Know the policies to contribute to application ? Should US011 User Delete my visualization history Remove my article visualization history ? Would Submission User Stories id As a Want to So then I can Comment Points Priority US012 User Submit new data Contribute with data - ? Must US013 User Cancel my data submission Cancel my submission if I submit something wrong - ? Must US014 User Edit my submission Update my submission info if needed - ? Must US015 User See my submissions Check the data that I contributed - ? Must US016 User See the status of my submissions Follow the submission of the article - ? Must US017 Sub-admin Submit new data Contribute with data - ? Must US018 Sub-admin Cancel my data submission Cancel my submission if I submit something wrong - ? Must US019 Sub-admin Edit my submission Update my submission info if needed - ? Must US020 Sub-admin See my submissions Check the data that I contributed - ? Must US021 Sub-admin See the status of my submissions Follow the submission of the article - ? Must Review User Stories id As a Want to So then I can Comment Points Priority US022 Admin Review submissions Mke sure that the data is right - ? Must US023 Admin Decline submitted data Always keep the data correct the data is wrong - ? Must US024 Admin See list of submissions Manage all the data submissions - ? Must US025 Admin Accept and publish the data submitted Always update the data - ? Must US026 Admin See which type of user is submitting the data Gve preference to sub-admin submissions - ? Must Document Versioning Date Author(s) Description Version 09/10/2020 Vitor Meireles Add tables 1.0 09/10/2020 Ygor Galeno Adding User Stories 2.0 09/10/2020 Guilherme Deusdar\u00e1 Updating document patterns 2.0 09/10/2020 Vitor Meireles Get rid of epic column at table 2.1 09/11/2020 Ygor Galeno Fix user stories ids 2.2 09/11/2020 Ygor Galeno Fix user stories id 2.3 09/11/2020 Guilherme Deusdar\u00e1 & Ygor Galeno Merge files 3.0 09/25/2020 Gabriel Filipe Update backlog 4.0","title":"Data Creation"},{"location":"base/requirements/modeling/backlogEpics/dataCreation/#data-creation","text":"","title":"Data Creation"},{"location":"base/requirements/modeling/backlogEpics/dataCreation/#features","text":"","title":"Features"},{"location":"base/requirements/modeling/backlogEpics/dataCreation/#user","text":"","title":"User"},{"location":"base/requirements/modeling/backlogEpics/dataCreation/#user-stories","text":"id As a Want to So then I can Comment Points Priority US001 User Create account Be part of TCLDL's community username, email, password, name ? Must US002 User Read account Read my account informations username,email,password,name ? Should US003 User Edit account Edit my account informations email, name, password ? Should US004 User Delete account Remove my account from TCLDL username, email, password ? Should US005 User Sign in Have access to the functionalities of TCLDL username,email,password ? Must US006 User Log out Close application session ? Must US007 User Subscribe to email list Have news and updates from application Email ? Could US008 User Unsubscribe email Unsubscribe my subscripition email ? Could US009 User Know how to contribute Know the policies to contribute to application ? Should US011 User Delete my visualization history Remove my article visualization history ? Would","title":"User Stories"},{"location":"base/requirements/modeling/backlogEpics/dataCreation/#submission","text":"","title":"Submission"},{"location":"base/requirements/modeling/backlogEpics/dataCreation/#user-stories_1","text":"id As a Want to So then I can Comment Points Priority US012 User Submit new data Contribute with data - ? Must US013 User Cancel my data submission Cancel my submission if I submit something wrong - ? Must US014 User Edit my submission Update my submission info if needed - ? Must US015 User See my submissions Check the data that I contributed - ? Must US016 User See the status of my submissions Follow the submission of the article - ? Must US017 Sub-admin Submit new data Contribute with data - ? Must US018 Sub-admin Cancel my data submission Cancel my submission if I submit something wrong - ? Must US019 Sub-admin Edit my submission Update my submission info if needed - ? Must US020 Sub-admin See my submissions Check the data that I contributed - ? Must US021 Sub-admin See the status of my submissions Follow the submission of the article - ? Must","title":"User Stories"},{"location":"base/requirements/modeling/backlogEpics/dataCreation/#review","text":"","title":"Review"},{"location":"base/requirements/modeling/backlogEpics/dataCreation/#user-stories_2","text":"id As a Want to So then I can Comment Points Priority US022 Admin Review submissions Mke sure that the data is right - ? Must US023 Admin Decline submitted data Always keep the data correct the data is wrong - ? Must US024 Admin See list of submissions Manage all the data submissions - ? Must US025 Admin Accept and publish the data submitted Always update the data - ? Must US026 Admin See which type of user is submitting the data Gve preference to sub-admin submissions - ? Must","title":"User Stories"},{"location":"base/requirements/modeling/backlogEpics/dataCreation/#document-versioning","text":"Date Author(s) Description Version 09/10/2020 Vitor Meireles Add tables 1.0 09/10/2020 Ygor Galeno Adding User Stories 2.0 09/10/2020 Guilherme Deusdar\u00e1 Updating document patterns 2.0 09/10/2020 Vitor Meireles Get rid of epic column at table 2.1 09/11/2020 Ygor Galeno Fix user stories ids 2.2 09/11/2020 Ygor Galeno Fix user stories id 2.3 09/11/2020 Guilherme Deusdar\u00e1 & Ygor Galeno Merge files 3.0 09/25/2020 Gabriel Filipe Update backlog 4.0","title":"Document Versioning"},{"location":"base/requirements/modeling/backlogEpics/dataVisualization/","text":"Data Visualization Features Graphs User Stories id As a Want to So then I can Comment Points Priority US027 User Visualize graphs of performance per year Identify patterns and trends over time ? Must US028 User Visualize graphs of performance per computing power Identify patterns, trends and understand the role played by computing power ? Must US029 User Visualize graphs in different types Understand it in different prespectives ? Must US030 User Download graphs Use the graphs in other places ? Must US031 User Have the graphs in my homepage imediately see them ? Must Search User Stories id As a Want to So then I can Comment Points Priority US032 User View domains Select the domain I want to see ? Must US033 User To view graphs of performance for computing power I can view patterns, trends and compare performances by computing power ? Must US034 User Search papers by Title I can find the paper I want ? Must US035 User Search papers by Keyword I can find relevant papers for what I want ? Must US036 User Filter search by domain I can view papers just on the domain that I want ? Must US037 User See results list from search ordered ranking I can view the bests performances first ? Must US038 User See results list from search ordered year I can view the latest performances first ? Must Document Versioning Date Author(s) Description Version 09/10/2020 Guilherme Deusdar\u00e1 Creates the page and adds User Stories 1.0 09/10/2020 Vitor Meireles Update epic field at table 1.1 09/11/2020 Ygor Galeno Fix user stories id 1.2 09/25/2020 Gabriel Filipe Update backlog 2.0","title":"Data Visualization"},{"location":"base/requirements/modeling/backlogEpics/dataVisualization/#data-visualization","text":"","title":"Data Visualization"},{"location":"base/requirements/modeling/backlogEpics/dataVisualization/#features","text":"","title":"Features"},{"location":"base/requirements/modeling/backlogEpics/dataVisualization/#graphs","text":"","title":"Graphs"},{"location":"base/requirements/modeling/backlogEpics/dataVisualization/#user-stories","text":"id As a Want to So then I can Comment Points Priority US027 User Visualize graphs of performance per year Identify patterns and trends over time ? Must US028 User Visualize graphs of performance per computing power Identify patterns, trends and understand the role played by computing power ? Must US029 User Visualize graphs in different types Understand it in different prespectives ? Must US030 User Download graphs Use the graphs in other places ? Must US031 User Have the graphs in my homepage imediately see them ? Must","title":"User Stories"},{"location":"base/requirements/modeling/backlogEpics/dataVisualization/#search","text":"","title":"Search"},{"location":"base/requirements/modeling/backlogEpics/dataVisualization/#user-stories_1","text":"id As a Want to So then I can Comment Points Priority US032 User View domains Select the domain I want to see ? Must US033 User To view graphs of performance for computing power I can view patterns, trends and compare performances by computing power ? Must US034 User Search papers by Title I can find the paper I want ? Must US035 User Search papers by Keyword I can find relevant papers for what I want ? Must US036 User Filter search by domain I can view papers just on the domain that I want ? Must US037 User See results list from search ordered ranking I can view the bests performances first ? Must US038 User See results list from search ordered year I can view the latest performances first ? Must","title":"User Stories"},{"location":"base/requirements/modeling/backlogEpics/dataVisualization/#document-versioning","text":"Date Author(s) Description Version 09/10/2020 Guilherme Deusdar\u00e1 Creates the page and adds User Stories 1.0 09/10/2020 Vitor Meireles Update epic field at table 1.1 09/11/2020 Ygor Galeno Fix user stories id 1.2 09/25/2020 Gabriel Filipe Update backlog 2.0","title":"Document Versioning"},{"location":"base/requirements/preTraceability/5w2h/","text":"5W2H The 5W2H analysis stands out from other management methodologies as a simple, complete and efficient tool. It allows timely adjustments and modifications, even when action plans are already being put into practice. This is a type of troubleshooting method that can be used by anyone with a business or personal focus. Its structure is similar in some respects to the famous \u201cdivide and conquer\u201d, since it thoroughly subdivides the planning into several stages, giving it a broader and broader understanding . In other words, it facilitates the systematization and implementation of ideas enormously. The 5W What? \u2014 What will be done? \u2014 The specification of the action plan. For example: \u201cProspecting sponsorships for an event\u201d; Who? \u2014 Who\u2019s going to do it? \u2014 An action plan with no assigned responsibilities has a few (or zero) chances of being completed. You need to have a person or team assigned to act; When? \u2014 When will it be done? \u2014 the date planned for starting and completing the activity, taking into account the risks. O cumprimento do cronograma deve ser uma meta do plano de a\u00e7\u00e3o; Where? \u2014 Where will it be made? \u2014 can have one or many locations, this will depend on the task. Setting this point in the plan will help you to consider the change and its costs on time and in the budget; Why? \u2014 Why is this going to be done? \u2014 Every action must have a reason. A company can\u2019t define a plan without something bigger behind it. For example: \u201cWhy do we want to prospect sponsors for the event? Because it must be financially viable. \u201c The 2H How? \u2014 How will it be done? \u2014 In this item, a more detailed specification of the action plan is included. It can be a breakdown of activities, dates and responsibilities of each. We will continue to use the example of sponsorship prospecting: Define sponsorship and benefit ranges; Map the 100 largest customers in the company in the last year; Pick up 10 customers per day; Start the trading flow with the best prospects. How much? \u2014 How Much will it cost? \u2014 Every action plan must have a budget. It may be general, but ideally it is fragmented in stages; by actions or activities. Author : Gabriel Filipe Version: 1.0 References [Moodle] Serrano, Milene. V\u00eddeo Aula : 5w2h. [WebSite] https://scoreplan.com.br/5w2h-analysis-a-method-of-troubleshooting-and-drawing-action-plans/ Document Versioning Date Author(s) Description Version 09/07/2020 Gabriel Filipe Creates the page and adds 5w2h 1.0","title":"5w2h"},{"location":"base/requirements/preTraceability/5w2h/#5w2h","text":"The 5W2H analysis stands out from other management methodologies as a simple, complete and efficient tool. It allows timely adjustments and modifications, even when action plans are already being put into practice. This is a type of troubleshooting method that can be used by anyone with a business or personal focus. Its structure is similar in some respects to the famous \u201cdivide and conquer\u201d, since it thoroughly subdivides the planning into several stages, giving it a broader and broader understanding . In other words, it facilitates the systematization and implementation of ideas enormously.","title":"5W2H"},{"location":"base/requirements/preTraceability/5w2h/#the-5w","text":"What? \u2014 What will be done? \u2014 The specification of the action plan. For example: \u201cProspecting sponsorships for an event\u201d; Who? \u2014 Who\u2019s going to do it? \u2014 An action plan with no assigned responsibilities has a few (or zero) chances of being completed. You need to have a person or team assigned to act; When? \u2014 When will it be done? \u2014 the date planned for starting and completing the activity, taking into account the risks. O cumprimento do cronograma deve ser uma meta do plano de a\u00e7\u00e3o; Where? \u2014 Where will it be made? \u2014 can have one or many locations, this will depend on the task. Setting this point in the plan will help you to consider the change and its costs on time and in the budget; Why? \u2014 Why is this going to be done? \u2014 Every action must have a reason. A company can\u2019t define a plan without something bigger behind it. For example: \u201cWhy do we want to prospect sponsors for the event? Because it must be financially viable. \u201c","title":"The 5W"},{"location":"base/requirements/preTraceability/5w2h/#the-2h","text":"How? \u2014 How will it be done? \u2014 In this item, a more detailed specification of the action plan is included. It can be a breakdown of activities, dates and responsibilities of each. We will continue to use the example of sponsorship prospecting: Define sponsorship and benefit ranges; Map the 100 largest customers in the company in the last year; Pick up 10 customers per day; Start the trading flow with the best prospects. How much? \u2014 How Much will it cost? \u2014 Every action plan must have a budget. It may be general, but ideally it is fragmented in stages; by actions or activities. Author : Gabriel Filipe Version: 1.0","title":"The 2H"},{"location":"base/requirements/preTraceability/5w2h/#references","text":"[Moodle] Serrano, Milene. V\u00eddeo Aula : 5w2h. [WebSite] https://scoreplan.com.br/5w2h-analysis-a-method-of-troubleshooting-and-drawing-action-plans/","title":"References"},{"location":"base/requirements/preTraceability/5w2h/#document-versioning","text":"Date Author(s) Description Version 09/07/2020 Gabriel Filipe Creates the page and adds 5w2h 1.0","title":"Document Versioning"},{"location":"base/requirements/preTraceability/RichPicture/","text":"RichPicture Rich Picture is an artifact that contains a fast and objective design. The goal is to express a desire for character and activity. The source of this rich image is a brainstorm with the development team. Rich Pictures Handmade Rich Picture Digital Rich Picture Version 1 Version2 References [Moodle] Serrano, Milene. V\u00eddeo Aula : RichPicture. Document Versioning Date Author(s) Description Version 09/02/2020 Vitor Meireles Creating the document and adding the handmade Rich Picture 1.0 09/03/2020 Vitor Meireles Addition of digital version and some improvements 1.1 25/09/2020 Mikhaelle Bueno Update to version 2 1.2","title":"RichPicture"},{"location":"base/requirements/preTraceability/RichPicture/#richpicture","text":"Rich Picture is an artifact that contains a fast and objective design. The goal is to express a desire for character and activity. The source of this rich image is a brainstorm with the development team.","title":"RichPicture"},{"location":"base/requirements/preTraceability/RichPicture/#rich-pictures","text":"","title":"Rich Pictures"},{"location":"base/requirements/preTraceability/RichPicture/#handmade-rich-picture","text":"","title":"Handmade Rich Picture"},{"location":"base/requirements/preTraceability/RichPicture/#digital-rich-picture","text":"Version 1 Version2","title":"Digital Rich Picture"},{"location":"base/requirements/preTraceability/RichPicture/#references","text":"[Moodle] Serrano, Milene. V\u00eddeo Aula : RichPicture.","title":"References"},{"location":"base/requirements/preTraceability/RichPicture/#document-versioning","text":"Date Author(s) Description Version 09/02/2020 Vitor Meireles Creating the document and adding the handmade Rich Picture 1.0 09/03/2020 Vitor Meireles Addition of digital version and some improvements 1.1 25/09/2020 Mikhaelle Bueno Update to version 2 1.2","title":"Document Versioning"},{"location":"base/requirements/preTraceability/argumentation/","text":"Argumentation Argumentation literally means the act or effect of arguing, which in turn means presenting facts, ideas, evidence, logical reasons, etc. that prove a statement. According to Rahwan (2005), one of the main objectives of argumentation is to bring the various controversial points of view to a consistent and rational resolution. Author : Guilherme Deusdar\u00e1 Version: 0.1 Author : Guilherme Deusdar\u00e1 Version: 0.1 References JURETA, Ivan; MYLOPOULOS, John; FAULKNER, St\u00e9phane. Analysis of Multi-Party Agreement in Requirements Validation, Proceedings of the 17th IEEE International Requirements Engineering Conference IEEE Computer Society, pp. 57-66, 2009. RAHWAN, I. Guest editorial: Argumentation in multi-agent systems. Autonomous Agents and Multi-Agent Systems, Kluwer Academic Publishers, v. 11, n. 2, p. 115\u2013125,2005. ISSN 1387-2532. Dispon\u00edvel em: http://dx.doi.org/10.1007/s10458-005-3079-0. Document Versioning Date Author(s) Description Version 09/09/2020 Guilherme Deusdar\u00e1 Creates page and adds first version 0.1","title":"Argumentation"},{"location":"base/requirements/preTraceability/argumentation/#argumentation","text":"Argumentation literally means the act or effect of arguing, which in turn means presenting facts, ideas, evidence, logical reasons, etc. that prove a statement. According to Rahwan (2005), one of the main objectives of argumentation is to bring the various controversial points of view to a consistent and rational resolution. Author : Guilherme Deusdar\u00e1 Version: 0.1 Author : Guilherme Deusdar\u00e1 Version: 0.1","title":"Argumentation"},{"location":"base/requirements/preTraceability/argumentation/#references","text":"JURETA, Ivan; MYLOPOULOS, John; FAULKNER, St\u00e9phane. Analysis of Multi-Party Agreement in Requirements Validation, Proceedings of the 17th IEEE International Requirements Engineering Conference IEEE Computer Society, pp. 57-66, 2009. RAHWAN, I. Guest editorial: Argumentation in multi-agent systems. Autonomous Agents and Multi-Agent Systems, Kluwer Academic Publishers, v. 11, n. 2, p. 115\u2013125,2005. ISSN 1387-2532. Dispon\u00edvel em: http://dx.doi.org/10.1007/s10458-005-3079-0.","title":"References"},{"location":"base/requirements/preTraceability/argumentation/#document-versioning","text":"Date Author(s) Description Version 09/09/2020 Guilherme Deusdar\u00e1 Creates page and adds first version 0.1","title":"Document Versioning"},{"location":"base/requirements/preTraceability/mindMap/","text":"Mind Map A mind map is a diagram used to visually organize information. A mind map is hierarchical and shows relationships among pieces of the whole. It is often created around a single concept, drawn as an image in the center of a blank page, to which associated representations of ideas such as images, words and parts of words are added. Major ideas are connected directly to the central concept, and other ideas branch out from those major ideas. For this project we created a mind map based on the group brainstorm. Author : Gabriel Filipe & Guilherme Deusdar\u00e1 Version: 0.1 Click here to have a better visualization. Author : Gabriel Filipe & Guilherme Deusdar\u00e1 Version: 1.0 Click here to have a better visualization. Author : Gabriel Filipe Version: 2.0 Click here to have a better visualization. References [Moodle] Serrano, Milene. V\u00eddeo Aula : Mapa Mental. [WebSite] https://en.wikipedia.org/wiki/Mind_map Document Versioning Date Author(s) Description Version 09/03/2020 Gabriel Filipe & Guilherme Deusdar\u00e1 Creates page and adds first version 0.1 09/07/2020 Gabriel Filipe & Guilherme Deusdar\u00e1 Updates mind map 1.0 09/25/2020 Gabriel Filipe Updates mind map 2.0","title":"Mind Map"},{"location":"base/requirements/preTraceability/mindMap/#mind-map","text":"A mind map is a diagram used to visually organize information. A mind map is hierarchical and shows relationships among pieces of the whole. It is often created around a single concept, drawn as an image in the center of a blank page, to which associated representations of ideas such as images, words and parts of words are added. Major ideas are connected directly to the central concept, and other ideas branch out from those major ideas. For this project we created a mind map based on the group brainstorm. Author : Gabriel Filipe & Guilherme Deusdar\u00e1 Version: 0.1 Click here to have a better visualization. Author : Gabriel Filipe & Guilherme Deusdar\u00e1 Version: 1.0 Click here to have a better visualization. Author : Gabriel Filipe Version: 2.0 Click here to have a better visualization.","title":"Mind Map"},{"location":"base/requirements/preTraceability/mindMap/#references","text":"[Moodle] Serrano, Milene. V\u00eddeo Aula : Mapa Mental. [WebSite] https://en.wikipedia.org/wiki/Mind_map","title":"References"},{"location":"base/requirements/preTraceability/mindMap/#document-versioning","text":"Date Author(s) Description Version 09/03/2020 Gabriel Filipe & Guilherme Deusdar\u00e1 Creates page and adds first version 0.1 09/07/2020 Gabriel Filipe & Guilherme Deusdar\u00e1 Updates mind map 1.0 09/25/2020 Gabriel Filipe Updates mind map 2.0","title":"Document Versioning"},{"location":"desing_patterns/behavioral_gof/","text":"Behavioral Patterns Behavioral patterns are patterns aimed at changing the level of behavior of objects. In this document we will give a brief overview of the existing standards and explain further the patterns we use in our project. Command : Control calls to a specific component, modeling each request as an object. Allow operations to be undone or recorded. Iterator : Provide an efficient way to cycle through the elements of a collection sequentially, without exposing the internal structure of the collection. Mediator : Reduce the number of \"connections\" between objects by introducing a mediator, who will carry out all communication. Observer : Define an efficient mechanism to react to changes made to certain objects. State : Change the behavior of a given object according to the state it is in. Strategy : Allow, in a simple way, the variation of the algorithms used in the solving a particular problem. Template Methods : Define the order in which certain steps must be taken to solve a problem and allow these steps to be carried out in different ways depending on the situation. Visitor : Allow specific updates to a collection of objects according to the particular type of each updated object. Memento : It allows to store the internal state of an object at a certain time, so that it is possible to return it to this state, without causing problems with the encapsulation. A class is responsible for saving the state of the desired object; while another class is responsible for storing all these copies. Chain of Responsability : Avoid dependency between a receiving object and a requesting object. The base maintains a pointer as \"next\". Each derived class implements its own contribution to handle the request. Strategy The strategy is a behavioral design pattern that allows us to define a family of algorithms, make each algorithm become a class and make the objects of those classes interchangeable. This pattern helps us to encapsulate decision-making algorithms at runtime, this means that instead of implementing an algorithm with all pre-defined decision-making, our code can receive instructions at runtime and from choose which strategy he will follow. Objectives and problems solved In our project we use the strategies to solve the problem of user authentication roles and the problem of JWT (Jason Web Token), which are also part of the user authentication flow. Brief explanation of authentication flow : In our project there are four types of users, these users are divided between users who have an account, and users who do not have an account. For users who have an account there are roles that define the permission level of these users, they are: Admin: Users with maximum permission level, are responsible for accepting and reviewing papers sent by other users. Sub-Admin: They are users who can review the papers but cannot accept them. Collaborator: Users who can only submit papers. For a visualization and better understanding of the user authentication flow, it is recommended to read the following documents: Class Diagram Sequence Diagram Bearing in mind that each user has a role, at request time it is necessary to create a JWT for each user and the JWT will define which tasks that user will be able to perform. Thus, the strategy is the most suitable standard for solving this problem and that is why we chose it for this. The domain model below exemplifies the implementation of the strategy for the functionality of finding the repository by id and type, so that the CreateUserDBFactory class can create the adapter for creating a new user in the database. As implementa\u00e7\u00f5es das classes do modelo de domin\u00edo acima s\u00e3o mostradas logo abaixo: File: CreateUserDbFactory.ts File: FindRoleRepositoryContextAdapter.ts File: FindRoleRepositoryByIdAdapter.ts File: FindRoleRepositoryByTypeAdapter.ts Chain of Resposability The chain of responsibilities is a behavioral pattern that allows you to forward requests through a chain of handles. When a handle receives the request, it decides whether it will handle that request or pass it on. Objectives and problems solved In our project it is basically a giant chain of responsibility, this happens due to the principle of inversion dependency control which is widely used due to the Hexagonal architecture that is being used in our project, but a more specific example of this chain is the RemoveUserRoute.ts file, where we call one method of a class to find the user by the request id, and if that user is found we call another method of another class to have that user removed. Code Example: File: RemoveUserRoute.ts References [Moodle] Serrano, Milene. V\u00eddeo Aula : Gofs Comportamentais [WebSite] Strategy [WebSite] Chain of Resposability Document Versioning Date Author(s) Description Version 10/23/2020 Lorrany Azevedo Document creation 0.1 10/26/2020 Lorrany Azevedo Add document structure 0.2 10/26/2020 Lorrany Azevedo, Ygor Galeno Add strategy definition 0.3 10/26/2020 Lorrany Azevedo, Gabriel Fillipe Add behavioral patterns definition 0.4 10/26/2020 Lorrany Azevedo, Mikhaelle Bueno Add objectivies and problems solved - Strategy 0.5 10/26/2020 Lorrany Azevedo, Guilherme Deusdar\u00e1 Add objectivies and problems solved - Chain of Resposability 0.6 10/26/2020 Lorrany Azevedo Add code example 0.7","title":"Behavioral GOF's"},{"location":"desing_patterns/behavioral_gof/#behavioral-patterns","text":"Behavioral patterns are patterns aimed at changing the level of behavior of objects. In this document we will give a brief overview of the existing standards and explain further the patterns we use in our project. Command : Control calls to a specific component, modeling each request as an object. Allow operations to be undone or recorded. Iterator : Provide an efficient way to cycle through the elements of a collection sequentially, without exposing the internal structure of the collection. Mediator : Reduce the number of \"connections\" between objects by introducing a mediator, who will carry out all communication. Observer : Define an efficient mechanism to react to changes made to certain objects. State : Change the behavior of a given object according to the state it is in. Strategy : Allow, in a simple way, the variation of the algorithms used in the solving a particular problem. Template Methods : Define the order in which certain steps must be taken to solve a problem and allow these steps to be carried out in different ways depending on the situation. Visitor : Allow specific updates to a collection of objects according to the particular type of each updated object. Memento : It allows to store the internal state of an object at a certain time, so that it is possible to return it to this state, without causing problems with the encapsulation. A class is responsible for saving the state of the desired object; while another class is responsible for storing all these copies. Chain of Responsability : Avoid dependency between a receiving object and a requesting object. The base maintains a pointer as \"next\". Each derived class implements its own contribution to handle the request.","title":"Behavioral Patterns"},{"location":"desing_patterns/behavioral_gof/#strategy","text":"The strategy is a behavioral design pattern that allows us to define a family of algorithms, make each algorithm become a class and make the objects of those classes interchangeable. This pattern helps us to encapsulate decision-making algorithms at runtime, this means that instead of implementing an algorithm with all pre-defined decision-making, our code can receive instructions at runtime and from choose which strategy he will follow.","title":"Strategy"},{"location":"desing_patterns/behavioral_gof/#objectives-and-problems-solved","text":"In our project we use the strategies to solve the problem of user authentication roles and the problem of JWT (Jason Web Token), which are also part of the user authentication flow. Brief explanation of authentication flow : In our project there are four types of users, these users are divided between users who have an account, and users who do not have an account. For users who have an account there are roles that define the permission level of these users, they are: Admin: Users with maximum permission level, are responsible for accepting and reviewing papers sent by other users. Sub-Admin: They are users who can review the papers but cannot accept them. Collaborator: Users who can only submit papers. For a visualization and better understanding of the user authentication flow, it is recommended to read the following documents: Class Diagram Sequence Diagram Bearing in mind that each user has a role, at request time it is necessary to create a JWT for each user and the JWT will define which tasks that user will be able to perform. Thus, the strategy is the most suitable standard for solving this problem and that is why we chose it for this. The domain model below exemplifies the implementation of the strategy for the functionality of finding the repository by id and type, so that the CreateUserDBFactory class can create the adapter for creating a new user in the database. As implementa\u00e7\u00f5es das classes do modelo de domin\u00edo acima s\u00e3o mostradas logo abaixo: File: CreateUserDbFactory.ts File: FindRoleRepositoryContextAdapter.ts File: FindRoleRepositoryByIdAdapter.ts File: FindRoleRepositoryByTypeAdapter.ts","title":"Objectives and problems solved"},{"location":"desing_patterns/behavioral_gof/#chain-of-resposability","text":"The chain of responsibilities is a behavioral pattern that allows you to forward requests through a chain of handles. When a handle receives the request, it decides whether it will handle that request or pass it on.","title":"Chain of Resposability"},{"location":"desing_patterns/behavioral_gof/#objectives-and-problems-solved_1","text":"In our project it is basically a giant chain of responsibility, this happens due to the principle of inversion dependency control which is widely used due to the Hexagonal architecture that is being used in our project, but a more specific example of this chain is the RemoveUserRoute.ts file, where we call one method of a class to find the user by the request id, and if that user is found we call another method of another class to have that user removed. Code Example: File: RemoveUserRoute.ts","title":"Objectives and problems solved"},{"location":"desing_patterns/behavioral_gof/#references","text":"[Moodle] Serrano, Milene. V\u00eddeo Aula : Gofs Comportamentais [WebSite] Strategy [WebSite] Chain of Resposability","title":"References"},{"location":"desing_patterns/behavioral_gof/#document-versioning","text":"Date Author(s) Description Version 10/23/2020 Lorrany Azevedo Document creation 0.1 10/26/2020 Lorrany Azevedo Add document structure 0.2 10/26/2020 Lorrany Azevedo, Ygor Galeno Add strategy definition 0.3 10/26/2020 Lorrany Azevedo, Gabriel Fillipe Add behavioral patterns definition 0.4 10/26/2020 Lorrany Azevedo, Mikhaelle Bueno Add objectivies and problems solved - Strategy 0.5 10/26/2020 Lorrany Azevedo, Guilherme Deusdar\u00e1 Add objectivies and problems solved - Chain of Resposability 0.6 10/26/2020 Lorrany Azevedo Add code example 0.7","title":"Document Versioning"},{"location":"desing_patterns/creational_gof/","text":"Creational GOF's Factory Method : Delegates instantiation to mirror subclasses. A subclass can be created as a mirror of the upper class. This subclass is specialized in creating instances. Abstract Factory : Similar to the Factory Method, but the difference is in the encapsulation of a group that has a common theme among them. Builder : The Builder takes complex instances and divides their construction into parts. Prototype : The client consumes a generalist class that is implemented in specific classes that contain the methods of the upper class. Singleton : Singleton is a single instance of an object that is declared globally. Multiton : A Multiton allows the creation of a limited number of instances and provides a static method for retrieving them. Object Pool : A Object Pool is a interface or abstract class that has multiple objects that are instantiated together. Factory Method Delegates instantiation to mirror subclasses. A subclass can be created as a mirror of the upper class. This subclass is specialized in creating instances. It makes it easier to separate the bottleneck of creating an instance, and it may be possible to create a mirror class with abstract methods and from it create classes with concrete methods that override the abstract method and create the instances. No nosso c\u00f3digo esses m\u00e9todos podem ser encontrados nas Factorys . An example is the SignUpControllerFactory class whose specific purpose is to instantiate users. This class implements a subscription to the ControllerFactory. Code example: Class Diagram Example: Abstract Factory Similar to the Factory Method, the Abstract Factory creates generic abstract classes that are then implemented in concrete methods, the difference is in the encapsulation of a group that has a common theme among them, creating individual factories for each item. We chose not to use this method in our project because the factory method met our requirements enough and has already allowed for good packaging and easy maintenance. Builder The Builder takes complex instances and divides their construction into parts. Unlike the Factory Method, the Builder divides the creation of instances into parts, containing more than one abstract method that are instantiated by concrete classes. The Builder has not yet been used in the project, because the Factory Method met the needs and there is not a case, today, where the Builder would be a better alternative. Prototype The client consumes a generalist class that is implemented in specific classes that contain the methods of the upper class. It generates many optimizations mainly in games and in our project it is used through a TypeScript tool which is Object.assign (). Object.assign () creates a copy of the data and assigns it to this. In Our Project, this method is used in RoleAdapter and UserAdapter. Code example: Singleton Singleton is a single instance of an object that is declared globally. This object cannot be instantiated again or modified by other classes. In our project, we chose not to use this standard because it does not comply with architectural standards. Multiton A Multiton allows the creation of a limited number of instances and provides a static method for retrieving them. This object cannot be instantiated again or modified by other classes. In our project, we chose not to use this standard because it does not comply with architectural pattern. Object Pool A Object Pool is a interface or abstract class that has multiple objects that are instantiated together. The Builder has not yet been used in the project, because of architectural standards, we keep objects as uncoupled as possible. References [WebSite] UML site [Moodle] Serrano, Milene. V\u00eddeo Aula : GoFs Document Versioning Date Author(s) Description Version 10/23/2020 Lorrany Azevedo Document creation 0.1 10/23/2020 Mikhaelle Bueno, Lorrany Azevedo Add factory method concept 0.2 10/26/2020 Mikhaelle Bueno Add factory method concept and example 0.3","title":"Creational GOF's"},{"location":"desing_patterns/creational_gof/#creational-gofs","text":"Factory Method : Delegates instantiation to mirror subclasses. A subclass can be created as a mirror of the upper class. This subclass is specialized in creating instances. Abstract Factory : Similar to the Factory Method, but the difference is in the encapsulation of a group that has a common theme among them. Builder : The Builder takes complex instances and divides their construction into parts. Prototype : The client consumes a generalist class that is implemented in specific classes that contain the methods of the upper class. Singleton : Singleton is a single instance of an object that is declared globally. Multiton : A Multiton allows the creation of a limited number of instances and provides a static method for retrieving them. Object Pool : A Object Pool is a interface or abstract class that has multiple objects that are instantiated together.","title":"Creational GOF's"},{"location":"desing_patterns/creational_gof/#factory-method","text":"Delegates instantiation to mirror subclasses. A subclass can be created as a mirror of the upper class. This subclass is specialized in creating instances. It makes it easier to separate the bottleneck of creating an instance, and it may be possible to create a mirror class with abstract methods and from it create classes with concrete methods that override the abstract method and create the instances. No nosso c\u00f3digo esses m\u00e9todos podem ser encontrados nas Factorys . An example is the SignUpControllerFactory class whose specific purpose is to instantiate users. This class implements a subscription to the ControllerFactory. Code example: Class Diagram Example:","title":"Factory Method"},{"location":"desing_patterns/creational_gof/#abstract-factory","text":"Similar to the Factory Method, the Abstract Factory creates generic abstract classes that are then implemented in concrete methods, the difference is in the encapsulation of a group that has a common theme among them, creating individual factories for each item. We chose not to use this method in our project because the factory method met our requirements enough and has already allowed for good packaging and easy maintenance.","title":"Abstract Factory"},{"location":"desing_patterns/creational_gof/#builder","text":"The Builder takes complex instances and divides their construction into parts. Unlike the Factory Method, the Builder divides the creation of instances into parts, containing more than one abstract method that are instantiated by concrete classes. The Builder has not yet been used in the project, because the Factory Method met the needs and there is not a case, today, where the Builder would be a better alternative.","title":"Builder"},{"location":"desing_patterns/creational_gof/#prototype","text":"The client consumes a generalist class that is implemented in specific classes that contain the methods of the upper class. It generates many optimizations mainly in games and in our project it is used through a TypeScript tool which is Object.assign (). Object.assign () creates a copy of the data and assigns it to this. In Our Project, this method is used in RoleAdapter and UserAdapter. Code example:","title":"Prototype"},{"location":"desing_patterns/creational_gof/#singleton","text":"Singleton is a single instance of an object that is declared globally. This object cannot be instantiated again or modified by other classes. In our project, we chose not to use this standard because it does not comply with architectural standards.","title":"Singleton"},{"location":"desing_patterns/creational_gof/#multiton","text":"A Multiton allows the creation of a limited number of instances and provides a static method for retrieving them. This object cannot be instantiated again or modified by other classes. In our project, we chose not to use this standard because it does not comply with architectural pattern.","title":"Multiton"},{"location":"desing_patterns/creational_gof/#object-pool","text":"A Object Pool is a interface or abstract class that has multiple objects that are instantiated together. The Builder has not yet been used in the project, because of architectural standards, we keep objects as uncoupled as possible.","title":"Object Pool"},{"location":"desing_patterns/creational_gof/#references","text":"[WebSite] UML site [Moodle] Serrano, Milene. V\u00eddeo Aula : GoFs","title":"References"},{"location":"desing_patterns/creational_gof/#document-versioning","text":"Date Author(s) Description Version 10/23/2020 Lorrany Azevedo Document creation 0.1 10/23/2020 Mikhaelle Bueno, Lorrany Azevedo Add factory method concept 0.2 10/26/2020 Mikhaelle Bueno Add factory method concept and example 0.3","title":"Document Versioning"},{"location":"desing_patterns/emerging_patterns/","text":"Emerging Pattern Desing Emerging design patterns are those associated with the latest platforms and technologies. In our project several of them were implemented and will be discussed in this section. List: Back-end S.O.L.I.D S - Single-responsiblity principle; O - Open-closed principle; L - Liskov substitution principle; I - Interface segregation principle; D - Dependency Inversion Principle; Dependency injection S.O.L.I.D S.O.L.I.D is an acronym for the first five object-oriented design (OOD) principles by Robert C. Martin, popularly known as Uncle Bob. These principles, when combined together, make it easy for a programmer to develop software that are easy to maintain and extend. They also make it easy for developers to avoid code smells, easily refactor code, and are also a part of the agile or adaptive software development. Let\u2019s look at each principle individually to understand why S.O.L.I.D can help make us better developers. Single-Responsibility Principle S.R.P for short - this principle states that: A class should have one and only one reason to change, meaning that a class should have only one job. arquivo: VerifyIfUserAlreadyExistsMiddleware.ts Open-Closed Principle Objects or entities should be open for extension, but closed for modification. arquivo: BadRequestError.ts Liskov Substitution Principle Let q(x) be a property provable about objects of x of type T. Then q(y) should be provable for objects y of type S where S is a subtype of T. All this is stating is that every subclass/derived class should be substitutable for their base/parent class. arquivo: CreateUserAdapterDb.ts Interface Segregation Principle A client should never be forced to implement an interface that it doesn\u2019t use or clients shouldn\u2019t be forced to depend on methods they do not use. This pattern is implemented in all our back-end structure, and there is a lot of examples. arquivo: FindUserRepository.ts This is an exemple of a simple interface that is extended by the class arquivo: FindUserAdapterDb.ts Dependency Inversion Principle The last, but definitely not the least states that: Entities must depend on abstractions not on concretions. It states that the high level module must not depend on the low level module, but they should depend on abstractions. arquivo: RequestValidatorMiddleware.ts Dependency Injection Design pattern used to implement IoC. It allows the creation of dependent objects outside of a class and provides those objects to a class through different ways. Using DI, we move the creation and binding of the dependent objects outside of the class that depends on them. The Dependency Injection can be found in our project in all the iteractors. One example can be seen below: arquivo: RequestValidatorMiddleware.ts References [WebSite] S.O.L.I.D: The First 5 Principles of Object Oriented Design [WebSite] Dependency Injection Document Versioning Date Author(s) Description Version 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 Document creation 0.1 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 Intro 0.2 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 S.O.L.I.D 0.3 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 Single-responsibility Principle 0.4 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 Open-closed Principle 0.5 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 Liskov substitution principle 0.6 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 Interface segregation principle 0.7 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 Dependency Inversion principle 0.8 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 Dependency injection 0.9 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 References 1.0","title":"Emerging Design Patterns"},{"location":"desing_patterns/emerging_patterns/#emerging-pattern-desing","text":"Emerging design patterns are those associated with the latest platforms and technologies. In our project several of them were implemented and will be discussed in this section.","title":"Emerging Pattern Desing"},{"location":"desing_patterns/emerging_patterns/#list","text":"","title":"List:"},{"location":"desing_patterns/emerging_patterns/#back-end","text":"S.O.L.I.D S - Single-responsiblity principle; O - Open-closed principle; L - Liskov substitution principle; I - Interface segregation principle; D - Dependency Inversion Principle; Dependency injection","title":"Back-end"},{"location":"desing_patterns/emerging_patterns/#solid","text":"S.O.L.I.D is an acronym for the first five object-oriented design (OOD) principles by Robert C. Martin, popularly known as Uncle Bob. These principles, when combined together, make it easy for a programmer to develop software that are easy to maintain and extend. They also make it easy for developers to avoid code smells, easily refactor code, and are also a part of the agile or adaptive software development. Let\u2019s look at each principle individually to understand why S.O.L.I.D can help make us better developers.","title":"S.O.L.I.D"},{"location":"desing_patterns/emerging_patterns/#single-responsibility-principle","text":"S.R.P for short - this principle states that: A class should have one and only one reason to change, meaning that a class should have only one job. arquivo: VerifyIfUserAlreadyExistsMiddleware.ts","title":"Single-Responsibility Principle"},{"location":"desing_patterns/emerging_patterns/#open-closed-principle","text":"Objects or entities should be open for extension, but closed for modification. arquivo: BadRequestError.ts","title":"Open-Closed Principle"},{"location":"desing_patterns/emerging_patterns/#liskov-substitution-principle","text":"Let q(x) be a property provable about objects of x of type T. Then q(y) should be provable for objects y of type S where S is a subtype of T. All this is stating is that every subclass/derived class should be substitutable for their base/parent class. arquivo: CreateUserAdapterDb.ts","title":"Liskov Substitution Principle"},{"location":"desing_patterns/emerging_patterns/#interface-segregation-principle","text":"A client should never be forced to implement an interface that it doesn\u2019t use or clients shouldn\u2019t be forced to depend on methods they do not use. This pattern is implemented in all our back-end structure, and there is a lot of examples. arquivo: FindUserRepository.ts This is an exemple of a simple interface that is extended by the class arquivo: FindUserAdapterDb.ts","title":"Interface Segregation Principle"},{"location":"desing_patterns/emerging_patterns/#dependency-inversion-principle","text":"The last, but definitely not the least states that: Entities must depend on abstractions not on concretions. It states that the high level module must not depend on the low level module, but they should depend on abstractions. arquivo: RequestValidatorMiddleware.ts","title":"Dependency Inversion Principle"},{"location":"desing_patterns/emerging_patterns/#dependency-injection","text":"Design pattern used to implement IoC. It allows the creation of dependent objects outside of a class and provides those objects to a class through different ways. Using DI, we move the creation and binding of the dependent objects outside of the class that depends on them. The Dependency Injection can be found in our project in all the iteractors. One example can be seen below: arquivo: RequestValidatorMiddleware.ts","title":"Dependency Injection"},{"location":"desing_patterns/emerging_patterns/#references","text":"[WebSite] S.O.L.I.D: The First 5 Principles of Object Oriented Design [WebSite] Dependency Injection","title":"References"},{"location":"desing_patterns/emerging_patterns/#document-versioning","text":"Date Author(s) Description Version 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 Document creation 0.1 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 Intro 0.2 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 S.O.L.I.D 0.3 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 Single-responsibility Principle 0.4 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 Open-closed Principle 0.5 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 Liskov substitution principle 0.6 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 Interface segregation principle 0.7 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 Dependency Inversion principle 0.8 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 Dependency injection 0.9 10/26/2020 Gabriel Filipe, Guilherme Deusdar\u00e1 References 1.0","title":"Document Versioning"},{"location":"desing_patterns/grasp/","text":"General Responsibility Assignment Software Patterns GRASP standards are guidelines that assign responsibility to classes and objects in object-oriented designs. The following standards are part of GRASP: Creators : Class responsible for instantiating objects. Information Expert : Assigns responsibilities to specialist classes. Low Coupling : Coupling is a measure of how strong two elements are connected, that is, how dependent they are on each other. Therefore, the more independent the elements are, the better, as this makes the code more maintainable and reusable. High coeshion : Elements that are created with a well-defined purpose and are limited to implementing only what they actually need to do. They are objects with highly related and highly focused responsibilities, having a high cohesion is almost synonymous with a code with low coupling. Polymorphism : Also known as superscript, it is a concept where child classes override superclass methods, they are methods that will contain the same signature but will have different implementations. Protected Variations : It protects elements from variations of other objects. For this, polymorphism and the use of interfaces are used to help maintain the stability of the element. Pure Fabrication : Classes created from a project need. Controllers : Assigns responsibility for handling system events for classes other than UI, it delegates the work that needs to be done to other objects. Indirection : Mediating object between two elements, this makes the coupling smaller. In our project we used several of the patterns mentioned above, below explain why we use these patterns and show where they were used in our project code. Creators As has already been said, creators are the classes responsible for instantiating objects, instantiating objects can be a complicated task and creators are used when some factors occur, one of these factors is when aggregation between two classes occurs. In our project a example of Creators are the factorys . A code example is SignUpControllerFactory class whose specific purpose is to instantiate SignUpController Code example: Information Expert Experts are responsible for delegating responsibilities to classes, such as methods, instilling objects, etc. In other words, creators are specialists in instantiating objects. In our code the specialties are. In our project a example of Experts are the FindBy's . The findBy is use for specific consultation tasks. Code example: Low Coupling As it has also been explained, the concept of low coupling is a very important concept when it comes to maintaining the quality of the software, it allows us greater manageability since the classes seek to be as independent as possible. Grasp patterns alone, when properly used, already reduce our coupling, but we can further decrease this coupling using the gof patterns that will be explained in the documents below. The hexagonal architecture of our application also allows for low coupling. High Coeshion The concept of high cohesion is directly related to the concept of low coupling, this means that we can only have one if we have the other, to maintain high cohesion it is important to choose an appropriate architecture for your product and to make use of the good software practices, in addition to using the gof and grasp standards we also chose to use a hexagonal architecture, this architecture alone already helps us to maintain a high cohesion since the outer layers cannot access the inner layers, architecture the use of interfaces, factory, adapters and other standards becomes highly necessary so that the layers can communicate with each other in a correct way and respecting the architecture. Polymorphism The concept of polymorphism is already a well-known concept and used in the object-oriented paradigm, also known as overwriting. It helps us to reuse the code since the child classes can implement the inherited methods in the most appropriate way for the use of that class. In our project a example of Polymorphism are the MiddlewareFactories . All this classes implements MiddlewareFactory and use it to create difference things. Code example: Controller The controller is the layer responsible for receiving the inputs that users make through the user interface and handling to these events, it is usually the intermediary layer between the requests of the actors and the backend that responds to the requests of those requests. This layer is responsible for understanding the users' requests and immediately afterwards it redirects that request to the element in the backend responsible for handling it. In our code we use the controller pattern a lot and below we have an example of its implementation. In our project the controllers can be found in: 2020.1_G2_TCLDL_Paper_Service/src/presentation/controllers/ . The controllers handle with HTTP requests. A code example is SignUpController Indirection The indirect pattern assigns responsibilities to intermediary objects between two other objects, a controller can be considered an object of induction since in an MVC model it is a mediator between as models and as views. Another object that fits this standard is the middleware and validators that are responsible for verifying that the data of a request matches what is expected. In the project code we use middleware, validators and controllers. In our project the middlewares can be found in: 2020.1_G2_TCLDL_Paper_Service/src/presentation/middlewares/ . The controllers handle with HTTP requests. A code example is SignUpValidatorMiddleware Pure Fabrication The concept of pure manufacturing is based on the idea of creating elements that are not necessarily design patterns, but there is a need to create them in order to further improve the quality of the code, they are usually classes created to be intermediate in the communication between other classes, api's that facilitate and improve product quality etc. The concept of indirectness fits here, since this pattern is usually an intermediary between objects. Our main pure manufacturing is the API_Gateway repository, which will be responsible for being the intermediate gate between the client (Frontend) and our server (Backend - Paper_service). The API_gateway can be found in this repository. References [Moodle] Serrano, Milene. V\u00eddeo Aula : GRASP Document Versioning Date Author(s) Description Version 10/23/2020 Lorrany Azevedo Document creation 0.1 10/23/2020 Lorrany Azevedo, Gabriel Filipe Add grasp concept 0.2 10/23/2020 Lorrany Azevedo, Ygor Galeno Add creators, information expert and low coupling definitions 0.3 10/23/2020 Lorrany Azevedo, Mikhaelle Bueno Add high coeshion definition 0.4 10/23/2020 Lorrany Azevedo, Vitor Meireles Add polymorphis definition 0.5 10/23/2020 Lorrany Azevedo, Mikhaelle bueno, Gabriel Filipe Add controller definition 0.6 10/23/2020 Lorrany Azevedo, Mikhaelle bueno, Guilherme Deusdar\u00e1 Add indirection definition 0.7 10/23/2020 Lorrany Azevedo, Mikhaelle bueno, Ygor Galeno Add pure fabrication definition 0.8 10/25/2020 Mikhaelle Bueno Add gifs and images examples 0.9 10/26/2020 Mikhaelle Bueno, Guilherme Deusdar\u00e1 Add gifs and images examples 0.9","title":"GRASP"},{"location":"desing_patterns/grasp/#general-responsibility-assignment-software-patterns","text":"GRASP standards are guidelines that assign responsibility to classes and objects in object-oriented designs. The following standards are part of GRASP: Creators : Class responsible for instantiating objects. Information Expert : Assigns responsibilities to specialist classes. Low Coupling : Coupling is a measure of how strong two elements are connected, that is, how dependent they are on each other. Therefore, the more independent the elements are, the better, as this makes the code more maintainable and reusable. High coeshion : Elements that are created with a well-defined purpose and are limited to implementing only what they actually need to do. They are objects with highly related and highly focused responsibilities, having a high cohesion is almost synonymous with a code with low coupling. Polymorphism : Also known as superscript, it is a concept where child classes override superclass methods, they are methods that will contain the same signature but will have different implementations. Protected Variations : It protects elements from variations of other objects. For this, polymorphism and the use of interfaces are used to help maintain the stability of the element. Pure Fabrication : Classes created from a project need. Controllers : Assigns responsibility for handling system events for classes other than UI, it delegates the work that needs to be done to other objects. Indirection : Mediating object between two elements, this makes the coupling smaller. In our project we used several of the patterns mentioned above, below explain why we use these patterns and show where they were used in our project code.","title":"General Responsibility Assignment Software Patterns"},{"location":"desing_patterns/grasp/#creators","text":"As has already been said, creators are the classes responsible for instantiating objects, instantiating objects can be a complicated task and creators are used when some factors occur, one of these factors is when aggregation between two classes occurs. In our project a example of Creators are the factorys . A code example is SignUpControllerFactory class whose specific purpose is to instantiate SignUpController Code example:","title":"Creators"},{"location":"desing_patterns/grasp/#information-expert","text":"Experts are responsible for delegating responsibilities to classes, such as methods, instilling objects, etc. In other words, creators are specialists in instantiating objects. In our code the specialties are. In our project a example of Experts are the FindBy's . The findBy is use for specific consultation tasks. Code example:","title":"Information Expert"},{"location":"desing_patterns/grasp/#low-coupling","text":"As it has also been explained, the concept of low coupling is a very important concept when it comes to maintaining the quality of the software, it allows us greater manageability since the classes seek to be as independent as possible. Grasp patterns alone, when properly used, already reduce our coupling, but we can further decrease this coupling using the gof patterns that will be explained in the documents below. The hexagonal architecture of our application also allows for low coupling.","title":"Low Coupling"},{"location":"desing_patterns/grasp/#high-coeshion","text":"The concept of high cohesion is directly related to the concept of low coupling, this means that we can only have one if we have the other, to maintain high cohesion it is important to choose an appropriate architecture for your product and to make use of the good software practices, in addition to using the gof and grasp standards we also chose to use a hexagonal architecture, this architecture alone already helps us to maintain a high cohesion since the outer layers cannot access the inner layers, architecture the use of interfaces, factory, adapters and other standards becomes highly necessary so that the layers can communicate with each other in a correct way and respecting the architecture.","title":"High Coeshion"},{"location":"desing_patterns/grasp/#polymorphism","text":"The concept of polymorphism is already a well-known concept and used in the object-oriented paradigm, also known as overwriting. It helps us to reuse the code since the child classes can implement the inherited methods in the most appropriate way for the use of that class. In our project a example of Polymorphism are the MiddlewareFactories . All this classes implements MiddlewareFactory and use it to create difference things. Code example:","title":"Polymorphism"},{"location":"desing_patterns/grasp/#controller","text":"The controller is the layer responsible for receiving the inputs that users make through the user interface and handling to these events, it is usually the intermediary layer between the requests of the actors and the backend that responds to the requests of those requests. This layer is responsible for understanding the users' requests and immediately afterwards it redirects that request to the element in the backend responsible for handling it. In our code we use the controller pattern a lot and below we have an example of its implementation. In our project the controllers can be found in: 2020.1_G2_TCLDL_Paper_Service/src/presentation/controllers/ . The controllers handle with HTTP requests. A code example is SignUpController","title":"Controller"},{"location":"desing_patterns/grasp/#indirection","text":"The indirect pattern assigns responsibilities to intermediary objects between two other objects, a controller can be considered an object of induction since in an MVC model it is a mediator between as models and as views. Another object that fits this standard is the middleware and validators that are responsible for verifying that the data of a request matches what is expected. In the project code we use middleware, validators and controllers. In our project the middlewares can be found in: 2020.1_G2_TCLDL_Paper_Service/src/presentation/middlewares/ . The controllers handle with HTTP requests. A code example is SignUpValidatorMiddleware","title":"Indirection"},{"location":"desing_patterns/grasp/#pure-fabrication","text":"The concept of pure manufacturing is based on the idea of creating elements that are not necessarily design patterns, but there is a need to create them in order to further improve the quality of the code, they are usually classes created to be intermediate in the communication between other classes, api's that facilitate and improve product quality etc. The concept of indirectness fits here, since this pattern is usually an intermediary between objects. Our main pure manufacturing is the API_Gateway repository, which will be responsible for being the intermediate gate between the client (Frontend) and our server (Backend - Paper_service). The API_gateway can be found in this repository.","title":"Pure Fabrication"},{"location":"desing_patterns/grasp/#references","text":"[Moodle] Serrano, Milene. V\u00eddeo Aula : GRASP","title":"References"},{"location":"desing_patterns/grasp/#document-versioning","text":"Date Author(s) Description Version 10/23/2020 Lorrany Azevedo Document creation 0.1 10/23/2020 Lorrany Azevedo, Gabriel Filipe Add grasp concept 0.2 10/23/2020 Lorrany Azevedo, Ygor Galeno Add creators, information expert and low coupling definitions 0.3 10/23/2020 Lorrany Azevedo, Mikhaelle Bueno Add high coeshion definition 0.4 10/23/2020 Lorrany Azevedo, Vitor Meireles Add polymorphis definition 0.5 10/23/2020 Lorrany Azevedo, Mikhaelle bueno, Gabriel Filipe Add controller definition 0.6 10/23/2020 Lorrany Azevedo, Mikhaelle bueno, Guilherme Deusdar\u00e1 Add indirection definition 0.7 10/23/2020 Lorrany Azevedo, Mikhaelle bueno, Ygor Galeno Add pure fabrication definition 0.8 10/25/2020 Mikhaelle Bueno Add gifs and images examples 0.9 10/26/2020 Mikhaelle Bueno, Guilherme Deusdar\u00e1 Add gifs and images examples 0.9","title":"Document Versioning"},{"location":"desing_patterns/structural_gof/","text":"Structural Patterns The structural gofs patterns are concerned with how objects will be organized to form larger structures, these patterns aim to decrease the coupling between these objects. Below we put a small definition of the existing standards and we will explain better those used in the project. Adapter : Allow an object to be replaced by another that despite performing the same task has a different interface Bridge : Separate one abstraction of your representation, so that both may vary and produce types of different objects. Composite : Group objects that are part of a part-whole relationship in order to treat them without distinction. polimorfismo todo-parte Decorator : Add functionality a an object dynamically Facade : Provide a simplified interface capable of centralizing the use of several interfaces of a system. Flyweight : Efficiently share objects that are used in large quantities. Proxy : Control calls to an object through another object on the same interface. Adapter The adapter design pattern as the definition already tells us, allows us to replace one object with another without complications with our client, it is characteristic of objects with similar behaviors due to the fact that we use polymorphism to overwrite the behavior of these objects. A great use of the adapter is to allow us to change the behavior of a given object without touching its code, avoiding, for example, a new version of it. Below we have an example of implementing an adapter: File: ExpressControlerAdapter.ts Another example of an adapter: File: ExpressMiddlewareAdapter.ts Objectives and problems solved The adapter in the context of the Paper Service, which is our micro-service responsible for the backend, is used to adapt the Controller interface, which is responsible for receiving customer requests. Decorator The decorator is a design pattern that allows you to add conformity to objects. We started from a base application and added other features to that base. For a better understanding of the functioning of this pattern, we put below an example that shows us a class diagram of a notification functionality and its respective decorators, the application base sends as notifications only by email, as other forms of notification such as for example SMS are made through decorators. ( Image Reference ) In our application the use of decorators was through TypeORM, which is an ORM (Object-relational mapping) for the language used in the project (TypeScript / JavaScript). \"Object-relational mapping (ORM, O/RM, and O/R mapping tool) in computer science is a programming technique for converting data between incompatible type systems using object-oriented programming languages.\" ( Wikipedia ) In typeorm there is the use of the convergent pattern called Data Mapper, this pattern and its behavior are decorators. Data mappers have some characteristics such as being a record object that models information from the application and is passed to a repository that handles operations such as saving, among other features. This concept emerged through DDD (Domain Drive Design) architecture. References [Moodle] Serrano, Milene. V\u00eddeo Aula : Gofs Estruturais [WebSite] Decorator Document Versioning Date Author(s) Description Version 10/23/2020 Lorrany Azevedo Document creation 0.1 10/25/2020 Lorrany Azevedo, Ygor Galeno Add gofs description 0.2 10/25/2020 Lorrany Azevedo, Gabriel Fillipe Add adapter concept 0.3 10/26/2020 Lorrany Azevedo, Mikhaelle Bueno Add adapter code example 0.4 10/26/2020 Lorrany Azevedo, Guilherme Deusdar\u00e1 Add adapter code example 0.5 10/26/2020 Lorrany Azevedo, Gabriel Fillipe, Mikhaelle Bueno Add decorator definition 0.6","title":"Structural GOF's"},{"location":"desing_patterns/structural_gof/#structural-patterns","text":"The structural gofs patterns are concerned with how objects will be organized to form larger structures, these patterns aim to decrease the coupling between these objects. Below we put a small definition of the existing standards and we will explain better those used in the project. Adapter : Allow an object to be replaced by another that despite performing the same task has a different interface Bridge : Separate one abstraction of your representation, so that both may vary and produce types of different objects. Composite : Group objects that are part of a part-whole relationship in order to treat them without distinction. polimorfismo todo-parte Decorator : Add functionality a an object dynamically Facade : Provide a simplified interface capable of centralizing the use of several interfaces of a system. Flyweight : Efficiently share objects that are used in large quantities. Proxy : Control calls to an object through another object on the same interface.","title":"Structural Patterns"},{"location":"desing_patterns/structural_gof/#adapter","text":"The adapter design pattern as the definition already tells us, allows us to replace one object with another without complications with our client, it is characteristic of objects with similar behaviors due to the fact that we use polymorphism to overwrite the behavior of these objects. A great use of the adapter is to allow us to change the behavior of a given object without touching its code, avoiding, for example, a new version of it. Below we have an example of implementing an adapter: File: ExpressControlerAdapter.ts Another example of an adapter: File: ExpressMiddlewareAdapter.ts","title":"Adapter"},{"location":"desing_patterns/structural_gof/#objectives-and-problems-solved","text":"The adapter in the context of the Paper Service, which is our micro-service responsible for the backend, is used to adapt the Controller interface, which is responsible for receiving customer requests.","title":"Objectives and problems solved"},{"location":"desing_patterns/structural_gof/#decorator","text":"The decorator is a design pattern that allows you to add conformity to objects. We started from a base application and added other features to that base. For a better understanding of the functioning of this pattern, we put below an example that shows us a class diagram of a notification functionality and its respective decorators, the application base sends as notifications only by email, as other forms of notification such as for example SMS are made through decorators. ( Image Reference ) In our application the use of decorators was through TypeORM, which is an ORM (Object-relational mapping) for the language used in the project (TypeScript / JavaScript). \"Object-relational mapping (ORM, O/RM, and O/R mapping tool) in computer science is a programming technique for converting data between incompatible type systems using object-oriented programming languages.\" ( Wikipedia ) In typeorm there is the use of the convergent pattern called Data Mapper, this pattern and its behavior are decorators. Data mappers have some characteristics such as being a record object that models information from the application and is passed to a repository that handles operations such as saving, among other features. This concept emerged through DDD (Domain Drive Design) architecture.","title":"Decorator"},{"location":"desing_patterns/structural_gof/#references","text":"[Moodle] Serrano, Milene. V\u00eddeo Aula : Gofs Estruturais [WebSite] Decorator","title":"References"},{"location":"desing_patterns/structural_gof/#document-versioning","text":"Date Author(s) Description Version 10/23/2020 Lorrany Azevedo Document creation 0.1 10/25/2020 Lorrany Azevedo, Ygor Galeno Add gofs description 0.2 10/25/2020 Lorrany Azevedo, Gabriel Fillipe Add adapter concept 0.3 10/26/2020 Lorrany Azevedo, Mikhaelle Bueno Add adapter code example 0.4 10/26/2020 Lorrany Azevedo, Guilherme Deusdar\u00e1 Add adapter code example 0.5 10/26/2020 Lorrany Azevedo, Gabriel Fillipe, Mikhaelle Bueno Add decorator definition 0.6","title":"Document Versioning"},{"location":"desing_patterns/tests/","text":"Tests and Continuous Integrations Test-driven development is a software development practice advocated in XP and consists of the practice of test-driven development and in TCLDL we inherit this from DDD (domain-driven desing). Using TDD we program the tests in the extension codes .Spec.ts in order to know the type of result we would like to obtain, with that done the extension code .Ts is done. As expected from TDD, the project code does unit tests to check every minor part of the system that is decoupled, evaluating the results of classes and methods. Jest The technology used for Js and Ts tests is Jest to mitigate redundancies and couplings in a backend with node and express, which are some of our technologies. The Jest tool was choosen because it`s fast safe and easy mocking. Jest Commitlint Based on a commits convention, it is used to validate messages with relatively little red tape. This is useful for standardizing team commits. Lint Husky hook Husky supports Commitlint and is being used to lint commit messages. Husky GitHub Actions GitHub Actions is the tool of choice for automating and executing workflows and software development, including CI / CD. The project has a Node.js base and database and test integration is managed by the GitHub Actions configuration files. GitHub Actions Code Quality && Coverage 100% This is used as metric to put in numbers or letters how good the code is being constructered. Code Climate Codeclimate is a static code quality analysis tool. This tool scans the code for duplication problems, code smells and other miscellaneous problems, thus raising the quality of the code. This is useful for avoid mistakes that makes code clean. Coverage References [WebSite] Jest site [WebSite] Conventional commits site [WebSite] CodeClimate site [WebSite] Husky doc site Document Versioning Date Author(s) Description Version 10/25/2020 Vitor Meireles Document creation 0.1 10/25/2020 Vitor Meireles Adds concepts 1.0 10/26/2020 Vitor Meireles Adds images 1.1 10/26/2020 Vitor Meireles Adds reference 1.2 10/26/2020 Vitor Meireles Adds code climate 1.3 10/26/2020 Vitor Meireles Makes documentation cleaner 1.4","title":"Tests and Continuous Integration"},{"location":"desing_patterns/tests/#tests-and-continuous-integrations","text":"Test-driven development is a software development practice advocated in XP and consists of the practice of test-driven development and in TCLDL we inherit this from DDD (domain-driven desing). Using TDD we program the tests in the extension codes .Spec.ts in order to know the type of result we would like to obtain, with that done the extension code .Ts is done. As expected from TDD, the project code does unit tests to check every minor part of the system that is decoupled, evaluating the results of classes and methods.","title":"Tests and Continuous Integrations"},{"location":"desing_patterns/tests/#jest","text":"The technology used for Js and Ts tests is Jest to mitigate redundancies and couplings in a backend with node and express, which are some of our technologies. The Jest tool was choosen because it`s fast safe and easy mocking. Jest","title":"Jest"},{"location":"desing_patterns/tests/#commitlint","text":"Based on a commits convention, it is used to validate messages with relatively little red tape. This is useful for standardizing team commits. Lint","title":"Commitlint"},{"location":"desing_patterns/tests/#husky-hook","text":"Husky supports Commitlint and is being used to lint commit messages. Husky","title":"Husky hook"},{"location":"desing_patterns/tests/#github-actions","text":"GitHub Actions is the tool of choice for automating and executing workflows and software development, including CI / CD. The project has a Node.js base and database and test integration is managed by the GitHub Actions configuration files. GitHub Actions","title":"GitHub Actions"},{"location":"desing_patterns/tests/#code-quality-coverage-100","text":"This is used as metric to put in numbers or letters how good the code is being constructered.","title":"Code Quality &amp;&amp; Coverage 100%"},{"location":"desing_patterns/tests/#code-climate","text":"Codeclimate is a static code quality analysis tool. This tool scans the code for duplication problems, code smells and other miscellaneous problems, thus raising the quality of the code. This is useful for avoid mistakes that makes code clean. Coverage","title":"Code Climate"},{"location":"desing_patterns/tests/#references","text":"[WebSite] Jest site [WebSite] Conventional commits site [WebSite] CodeClimate site [WebSite] Husky doc site","title":"References"},{"location":"desing_patterns/tests/#document-versioning","text":"Date Author(s) Description Version 10/25/2020 Vitor Meireles Document creation 0.1 10/25/2020 Vitor Meireles Adds concepts 1.0 10/26/2020 Vitor Meireles Adds images 1.1 10/26/2020 Vitor Meireles Adds reference 1.2 10/26/2020 Vitor Meireles Adds code climate 1.3 10/26/2020 Vitor Meireles Makes documentation cleaner 1.4","title":"Document Versioning"},{"location":"desing_patterns/tests_and_ci/commitlint/","text":"Commit Lint Commit Lint is an important part for make commits with good description. The code is being shown under. Document Versioning Date Author(s) Description Version 10/25/2020 Vitor Meireles Document creation 0.1 10/26/2020 Vitor Meireles Add contents 1.0","title":"Commitlint"},{"location":"desing_patterns/tests_and_ci/commitlint/#commit-lint","text":"Commit Lint is an important part for make commits with good description. The code is being shown under.","title":"Commit Lint"},{"location":"desing_patterns/tests_and_ci/commitlint/#document-versioning","text":"Date Author(s) Description Version 10/25/2020 Vitor Meireles Document creation 0.1 10/26/2020 Vitor Meireles Add contents 1.0","title":"Document Versioning"},{"location":"desing_patterns/tests_and_ci/coverage/","text":"Coverage This is the image showing the metrics by code climate Above is the image with the code produce to implement coverage Document Versioning Date Author(s) Description Version 10/25/2020 Vitor Meireles Document creation 0.1 10/26/2020 Vitor Meireles Add contents 1.0","title":"Coverage"},{"location":"desing_patterns/tests_and_ci/coverage/#coverage","text":"This is the image showing the metrics by code climate Above is the image with the code produce to implement coverage","title":"Coverage"},{"location":"desing_patterns/tests_and_ci/coverage/#document-versioning","text":"Date Author(s) Description Version 10/25/2020 Vitor Meireles Document creation 0.1 10/26/2020 Vitor Meireles Add contents 1.0","title":"Document Versioning"},{"location":"desing_patterns/tests_and_ci/github_actions/","text":"GitHub Actions GitHub Actions is part of our CI/CD and each service code is being shown under. This is paper-service code This is the development part of paper service This is the paper service to master integration Document Versioning Date Author(s) Description Version 10/25/2020 Vitor Meireles Document creation 0.1 10/26/2020 Vitor Meireles Add contents 1.0","title":"Github actions"},{"location":"desing_patterns/tests_and_ci/github_actions/#github-actions","text":"GitHub Actions is part of our CI/CD and each service code is being shown under. This is paper-service code This is the development part of paper service This is the paper service to master integration","title":"GitHub Actions"},{"location":"desing_patterns/tests_and_ci/github_actions/#document-versioning","text":"Date Author(s) Description Version 10/25/2020 Vitor Meireles Document creation 0.1 10/26/2020 Vitor Meireles Add contents 1.0","title":"Document Versioning"},{"location":"desing_patterns/tests_and_ci/husky/","text":"Husky Husky is a hook for lint and your simple code is put following. Document Versioning Date Author(s) Description Version 10/25/2020 Vitor Meireles Document creation 0.1 10/26/2020 Vitor Meireles Add contents 1.0","title":"Husky"},{"location":"desing_patterns/tests_and_ci/husky/#husky","text":"Husky is a hook for lint and your simple code is put following.","title":"Husky"},{"location":"desing_patterns/tests_and_ci/husky/#document-versioning","text":"Date Author(s) Description Version 10/25/2020 Vitor Meireles Document creation 0.1 10/26/2020 Vitor Meireles Add contents 1.0","title":"Document Versioning"},{"location":"desing_patterns/tests_and_ci/jest/","text":"Jest Jest is our .Ts unit test. The code is under, first is the test code and after is the code to be tested. Document Versioning Date Author(s) Description Version 10/25/2020 Vitor Meireles Document creation 0.1 10/26/2020 Vitor Meireles Add contents 1.0","title":"Jest"},{"location":"desing_patterns/tests_and_ci/jest/#jest","text":"Jest is our .Ts unit test. The code is under, first is the test code and after is the code to be tested.","title":"Jest"},{"location":"desing_patterns/tests_and_ci/jest/#document-versioning","text":"Date Author(s) Description Version 10/25/2020 Vitor Meireles Document creation 0.1 10/26/2020 Vitor Meireles Add contents 1.0","title":"Document Versioning"},{"location":"extra_initiatives/extra_initiatives/","text":"Extra Initiatives Second delivery Design Sprint High Fidelity Prototype Backlog Lexicons Mind Map Rich Picture Third delivery High Fidelity Prototype Video 02 Document Versioning Date Author(s) Descri\u00e7\u00e3o Vers\u00e3o 09/25/2020 Lorrany Azevedo Creating the document 0.1 09/25/2020 Gabriel Filipe Adds link to backlog and mind map 0.2 09/25/2020 Mikhaelle Bueno Adds link to Rich Picture and Lexicons 0.3","title":"Extra Initiatives"},{"location":"extra_initiatives/extra_initiatives/#extra-initiatives","text":"","title":"Extra Initiatives"},{"location":"extra_initiatives/extra_initiatives/#second-delivery","text":"Design Sprint High Fidelity Prototype Backlog Lexicons Mind Map Rich Picture","title":"Second delivery"},{"location":"extra_initiatives/extra_initiatives/#third-delivery","text":"High Fidelity Prototype Video 02","title":"Third delivery"},{"location":"extra_initiatives/extra_initiatives/#document-versioning","text":"Date Author(s) Descri\u00e7\u00e3o Vers\u00e3o 09/25/2020 Lorrany Azevedo Creating the document 0.1 09/25/2020 Gabriel Filipe Adds link to backlog and mind map 0.2 09/25/2020 Mikhaelle Bueno Adds link to Rich Picture and Lexicons 0.3","title":"Document Versioning"},{"location":"softwareArchiteture/das/","text":"Software Architecture Document This document aims to register the architectural structure of the TCLDL website, developed as a final product of the ADS (Architecture and Software Design) discipline, on the Gama campus, at the University of Bras\u00edlia. The Software Architecture Document demonstrates the set of views that intend to cover the technical and structural aspects related to the development and implementation of the TCLDL website. 1. Introduction This architecture document has the function of specifying and documenting relevant architectural decisions in the production and implementation of the TCLDL website describing aspects of the system in a clear, structured and objective manner. 1.1 Purpose This document applies to the development process of the TLDL website, an application developed in the discipline Architecture and Software Design, at the University of Bras\u00edlia, in order to provide articles and data to be obtained quickly and easily. 1.2 Scope In this project, using the RUP (Rational Unified Process), we start with a typical set of views called \"4 + 1 view model\". The different views are listed below and will be addressed in the scope of this document. Use-Case View Logical View Implementation View Process View Deployment Vision Data View Implantation View 1.3 Definitions, Acronyms, and Abbreviations RUP (Rational Unified Process) 1.4 References https://nextjs.org/ https://www.postgresql.org/ https://expressjs.com/ 1.5 Overview For the FrontEnd a component architeture is used with NextJs and in the BackEnd hexagonal architeture is used with Express. More about this is described in the next sections 2. Architectural Representation Model of representation of the implemented services and the interactions established between those services, as well as the nature of these interactions. 2.1 Tecnologies 2.1.1 Front-End The NextJs is a react framework that use javascript language and is component oriented. It has some feature like: hybrid static & server rendering, typeScript support, smart bundling, route pre-fetching, and more. NextJs was chosen to be used in the scope of the discipline because almost all members of the team had already had contact with React and the JavaScript language which would facilitate the site development process. In addition, the framework offers easy installation, quick configuration, easy learning, fast performance and several features that facilitate the development process, such as automatic route mapping. 2.1.2 Back-End Express Express is a framework for web applications in Node.js, which uses javascript and has support for typescript. Small and flexible, it contains a robust set of features for web and mobile applications. Express was used to build the back end of the web application and was chosen because it is not a framework with a cast architecture, and can be shaped according to the needs of the discipline. In addition, it demonstrates all its value in its choice when it comes to real-time services, and also, for its wide community that actively maintain the framework, in addition to its simplicity. 2.1.3 Data Base PostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance. The use of PostgreSQL was based on its robustness, as it is one of the most used banks in the world, and one of the most common in cloud services. 2.2 Architectural Goals and Constraints Goals Requirements Scalability The application must be scalable Security The application must safely handle users' sensitive data Continous Integration The application must have continous integration Constrains Constrains Connectivity Internet connection is required Language The application will be developed in English Team The team has 6 people Deadline The proposed scope must be completed by the end of the course Author: Mikhaelle Bueno 3. Use-Case View The Use-Case Diagram describes the main features that the system intends to have. It is built of actors, who represent the real users of the system and the functionality (present in balloons) of the proposed application. Use-case diagrams are used to describe the Use-Case View because it offers a high-level model in relation to functionality During the development of the project, versions of the diagram have already been created, which can be seen in the Use-Case Diagram . However, the most current version can be seen below: . Author: Gabriel Filipe 4. Logical View The logical view is basically a view of the project model, visualized through packages, classes and interaction diagrams. The Package Diagram are normally used in this view. It is defined by the UML and describes the packages or pieces of the system divided into logical groupings showing the dependencies between them. This diagram is widely used to illustrate the architecture of a system showing the grouping of its classes. The most updated version of it can be seen below, and its traceability can be followed in the Package Diagram . 4.1 Front-end Logical View . Author: Mikhaelle Bueno 4.2 Back-end Logical View . Author: Mikhaelle Bueno 5. Process View Give details how operations are carried out, what messages are sent and when. Capture the process view of an architecture and provide a dynamic view of behavior. 5.1 Visitor - Process View [Version 2] . Author: Gabriel Filipe [Version 1] . Author: Guilherme Deusdara 5.2 Collaborator - Process View . Author: Guilherme Deusdara 5.3 Admin - Process View . Author: Gabriel Filipe 6. Implementation View 6.1 Overview 6.1.1 CreateUserAdapterDbFactory Open image in other tab to see more detailed Author: Ygor Galeno 6.1.2 CreateUserControllerFactory Author: Ygor Galeno 6.1.3 AuthMiddlewareFactory Author: Ygor Galeno 7. Implantation View The implantation diagram is a structural UML diagram that seeks to describe the application system, it represents the physical distribution of the system through hardware nodes, components and dependencies. In our project we use Docker to create application containers and run them individually, so the containers are our representation of us. We also use Docker-Compose to integrate application containers and upload them all at once. Below is a diagram of the TCLDL implementation. . Currently, due to the great demand for work, we were unable to implement the gateway, so the client's requests are hitting the paper service, but it is an important part of the application and will be implemented in the future. Author: Lorrany Azevedo 8. Architectural Pattern Hexagonal architecture is an architecture divided into layers, due to this division, the hexagonal architecture promotes clean and decoupled code, facilitating the development of big systems. 9. Quality Ensuring quality, the chosen architecture model (Hexagonal) helps us to maintain the scalable application, as this architecture is designed precisely so that large applications remain cohesive with the creation of service layers according to their responsibilities. Therefore, each layer / service is implemented independently, which in line with design standards and good programming practices helps us to keep very large software healthy. The choice of this architecture was due to the fact that the group has a plan to make the project expand after the end of the story and we believe that it has a great potential to grow and become a robust and complex project. In addition we also have some artifacts that were produced and that are highly related to the quality of a software, considering that in order to build quality software it is necessary to take into account not only the functional requirements specified by the customer, but also non-functional requirements. 10 NFR Nfr is intended to track non-functional requirements, our first version of nfr was made on the first delivery, this version is available at the link below: First NFR . Bellow we have a new version of NFR. New NFR . Author: Lorrany Azevedo References [Moodle] Serrano, Milene. V\u00eddeo Aula : DAS [WebSite] Componentes_Implanta\u00e7\u00e3o Date Author(s) Descri\u00e7\u00e3o Vers\u00e3o 11/18/2020 Mikhaelle Bueno Creating the document 0.1 11/19/2020 Mikhaelle Bueno Adding introdution 0.2 11/20/2020 Lorrany Azevedo Adding quality and nfr documents 0.3 11/20/2020 Lorrany Azevedo Adding implantation description and diagram 0.4 11/20/2020 Guilherme Deusdara Adding visitor's procces diagram 0.5 11/20/2020 Gabriel Filipe Adding visitor's procces diagram v1 0.6 11/20/2020 Guilherme Deusdara Adding collaborator's procces diagram 0.7 11/20/2020 Gabriel Filipe Adding admin's procces diagram 0.8 11/20/2020 Ygor Galeno Adding implementation view 0.9 11/20/2020 Gabriel Filipe Adding Use-Case View 1","title":"DAS"},{"location":"softwareArchiteture/das/#software-architecture-document","text":"This document aims to register the architectural structure of the TCLDL website, developed as a final product of the ADS (Architecture and Software Design) discipline, on the Gama campus, at the University of Bras\u00edlia. The Software Architecture Document demonstrates the set of views that intend to cover the technical and structural aspects related to the development and implementation of the TCLDL website.","title":"Software Architecture Document"},{"location":"softwareArchiteture/das/#1-introduction","text":"This architecture document has the function of specifying and documenting relevant architectural decisions in the production and implementation of the TCLDL website describing aspects of the system in a clear, structured and objective manner.","title":"1. Introduction"},{"location":"softwareArchiteture/das/#11-purpose","text":"This document applies to the development process of the TLDL website, an application developed in the discipline Architecture and Software Design, at the University of Bras\u00edlia, in order to provide articles and data to be obtained quickly and easily.","title":"1.1 Purpose"},{"location":"softwareArchiteture/das/#12-scope","text":"In this project, using the RUP (Rational Unified Process), we start with a typical set of views called \"4 + 1 view model\". The different views are listed below and will be addressed in the scope of this document. Use-Case View Logical View Implementation View Process View Deployment Vision Data View Implantation View","title":"1.2 Scope"},{"location":"softwareArchiteture/das/#13-definitions-acronyms-and-abbreviations","text":"RUP (Rational Unified Process)","title":"1.3 Definitions, Acronyms, and Abbreviations"},{"location":"softwareArchiteture/das/#14-references","text":"https://nextjs.org/ https://www.postgresql.org/ https://expressjs.com/","title":"1.4 References"},{"location":"softwareArchiteture/das/#15-overview","text":"For the FrontEnd a component architeture is used with NextJs and in the BackEnd hexagonal architeture is used with Express. More about this is described in the next sections","title":"1.5 Overview"},{"location":"softwareArchiteture/das/#2-architectural-representation","text":"Model of representation of the implemented services and the interactions established between those services, as well as the nature of these interactions.","title":"2. Architectural Representation"},{"location":"softwareArchiteture/das/#21-tecnologies","text":"","title":"2.1 Tecnologies"},{"location":"softwareArchiteture/das/#211-front-end","text":"The NextJs is a react framework that use javascript language and is component oriented. It has some feature like: hybrid static & server rendering, typeScript support, smart bundling, route pre-fetching, and more. NextJs was chosen to be used in the scope of the discipline because almost all members of the team had already had contact with React and the JavaScript language which would facilitate the site development process. In addition, the framework offers easy installation, quick configuration, easy learning, fast performance and several features that facilitate the development process, such as automatic route mapping.","title":"2.1.1 Front-End"},{"location":"softwareArchiteture/das/#212-back-end","text":"Express Express is a framework for web applications in Node.js, which uses javascript and has support for typescript. Small and flexible, it contains a robust set of features for web and mobile applications. Express was used to build the back end of the web application and was chosen because it is not a framework with a cast architecture, and can be shaped according to the needs of the discipline. In addition, it demonstrates all its value in its choice when it comes to real-time services, and also, for its wide community that actively maintain the framework, in addition to its simplicity.","title":"2.1.2 Back-End"},{"location":"softwareArchiteture/das/#213-data-base","text":"PostgreSQL is a powerful, open source object-relational database system with over 30 years of active development that has earned it a strong reputation for reliability, feature robustness, and performance. The use of PostgreSQL was based on its robustness, as it is one of the most used banks in the world, and one of the most common in cloud services.","title":"2.1.3 Data Base"},{"location":"softwareArchiteture/das/#22-architectural-goals-and-constraints","text":"Goals Requirements Scalability The application must be scalable Security The application must safely handle users' sensitive data Continous Integration The application must have continous integration Constrains Constrains Connectivity Internet connection is required Language The application will be developed in English Team The team has 6 people Deadline The proposed scope must be completed by the end of the course Author: Mikhaelle Bueno","title":"2.2 Architectural Goals and Constraints"},{"location":"softwareArchiteture/das/#3-use-case-view","text":"The Use-Case Diagram describes the main features that the system intends to have. It is built of actors, who represent the real users of the system and the functionality (present in balloons) of the proposed application. Use-case diagrams are used to describe the Use-Case View because it offers a high-level model in relation to functionality During the development of the project, versions of the diagram have already been created, which can be seen in the Use-Case Diagram . However, the most current version can be seen below: . Author: Gabriel Filipe","title":"3. Use-Case View"},{"location":"softwareArchiteture/das/#4-logical-view","text":"The logical view is basically a view of the project model, visualized through packages, classes and interaction diagrams. The Package Diagram are normally used in this view. It is defined by the UML and describes the packages or pieces of the system divided into logical groupings showing the dependencies between them. This diagram is widely used to illustrate the architecture of a system showing the grouping of its classes. The most updated version of it can be seen below, and its traceability can be followed in the Package Diagram .","title":"4. Logical View"},{"location":"softwareArchiteture/das/#41-front-end-logical-view","text":". Author: Mikhaelle Bueno","title":"4.1 Front-end Logical View"},{"location":"softwareArchiteture/das/#42-back-end-logical-view","text":". Author: Mikhaelle Bueno","title":"4.2 Back-end Logical View"},{"location":"softwareArchiteture/das/#5-process-view","text":"Give details how operations are carried out, what messages are sent and when. Capture the process view of an architecture and provide a dynamic view of behavior.","title":"5. Process View"},{"location":"softwareArchiteture/das/#51-visitor-process-view","text":"[Version 2] . Author: Gabriel Filipe [Version 1] . Author: Guilherme Deusdara","title":"5.1 Visitor - Process View"},{"location":"softwareArchiteture/das/#52-collaborator-process-view","text":". Author: Guilherme Deusdara","title":"5.2 Collaborator - Process View"},{"location":"softwareArchiteture/das/#53-admin-process-view","text":". Author: Gabriel Filipe","title":"5.3 Admin - Process View"},{"location":"softwareArchiteture/das/#6-implementation-view","text":"","title":"6. Implementation View"},{"location":"softwareArchiteture/das/#61-overview","text":"","title":"6.1 Overview"},{"location":"softwareArchiteture/das/#611-createuseradapterdbfactory","text":"Open image in other tab to see more detailed Author: Ygor Galeno","title":"6.1.1 CreateUserAdapterDbFactory"},{"location":"softwareArchiteture/das/#612-createusercontrollerfactory","text":"Author: Ygor Galeno","title":"6.1.2 CreateUserControllerFactory"},{"location":"softwareArchiteture/das/#613-authmiddlewarefactory","text":"Author: Ygor Galeno","title":"6.1.3 AuthMiddlewareFactory"},{"location":"softwareArchiteture/das/#7-implantation-view","text":"The implantation diagram is a structural UML diagram that seeks to describe the application system, it represents the physical distribution of the system through hardware nodes, components and dependencies. In our project we use Docker to create application containers and run them individually, so the containers are our representation of us. We also use Docker-Compose to integrate application containers and upload them all at once. Below is a diagram of the TCLDL implementation. . Currently, due to the great demand for work, we were unable to implement the gateway, so the client's requests are hitting the paper service, but it is an important part of the application and will be implemented in the future. Author: Lorrany Azevedo","title":"7. Implantation View"},{"location":"softwareArchiteture/das/#8-architectural-pattern","text":"Hexagonal architecture is an architecture divided into layers, due to this division, the hexagonal architecture promotes clean and decoupled code, facilitating the development of big systems.","title":"8. Architectural Pattern"},{"location":"softwareArchiteture/das/#9-quality","text":"Ensuring quality, the chosen architecture model (Hexagonal) helps us to maintain the scalable application, as this architecture is designed precisely so that large applications remain cohesive with the creation of service layers according to their responsibilities. Therefore, each layer / service is implemented independently, which in line with design standards and good programming practices helps us to keep very large software healthy. The choice of this architecture was due to the fact that the group has a plan to make the project expand after the end of the story and we believe that it has a great potential to grow and become a robust and complex project. In addition we also have some artifacts that were produced and that are highly related to the quality of a software, considering that in order to build quality software it is necessary to take into account not only the functional requirements specified by the customer, but also non-functional requirements.","title":"9. Quality"},{"location":"softwareArchiteture/das/#10-nfr","text":"Nfr is intended to track non-functional requirements, our first version of nfr was made on the first delivery, this version is available at the link below: First NFR . Bellow we have a new version of NFR. New NFR . Author: Lorrany Azevedo","title":"10 NFR"},{"location":"softwareArchiteture/das/#references","text":"[Moodle] Serrano, Milene. V\u00eddeo Aula : DAS [WebSite] Componentes_Implanta\u00e7\u00e3o Date Author(s) Descri\u00e7\u00e3o Vers\u00e3o 11/18/2020 Mikhaelle Bueno Creating the document 0.1 11/19/2020 Mikhaelle Bueno Adding introdution 0.2 11/20/2020 Lorrany Azevedo Adding quality and nfr documents 0.3 11/20/2020 Lorrany Azevedo Adding implantation description and diagram 0.4 11/20/2020 Guilherme Deusdara Adding visitor's procces diagram 0.5 11/20/2020 Gabriel Filipe Adding visitor's procces diagram v1 0.6 11/20/2020 Guilherme Deusdara Adding collaborator's procces diagram 0.7 11/20/2020 Gabriel Filipe Adding admin's procces diagram 0.8 11/20/2020 Ygor Galeno Adding implementation view 0.9 11/20/2020 Gabriel Filipe Adding Use-Case View 1","title":"References"},{"location":"softwareArchiteture/reuse/","text":"Software Reuse Document Software reuse is very necessary when it comes to software quality. Having maintainable, cohesive and loosely coupled software helps us to improve the quality of the software and saves us from various problems that can occur during development, in addition, a well-planned software saves costs, both in labor and consumption of hardware. So currently there are several concepts and standards that help us to implement good software and make it more maintainable. In addition to the forms of reuse already mentioned in the Desing Patterns documents below we will talk about some of them and will discuss in more detail those that were used in our project. Framework and Libraries The concept of framework, it provides a set of solutions for similar problems of different applications. These generic solutions can be switched according to the wishes and needs of users and applications. Frameworks can be developed by the developers of an application to meet the need to solve a set of problems that appear in several specific features of that application, or it can also be a more general tool that solves more generic problems in the area of \u200b\u200bsoftware development, such as example the React framework, which is a framework written in javascript and generates html, this framework is widely used and allows us to create web pages with complex design without the need for lines and more lines of html. In our project we did not create any specific framework or library for TCLDL, but we used frameworks both on the frontend and on the backend of our application. These frameworks are described in more detail in the DAS document. Frontend framework - Next.Js . Backend framework - Express . Author: Lorrany Azevedo Components Reuse through components is widely used and in our code it was used both on the backend and on the frontend. Some component diagrams have already been made and covered in the delivery of Traditional Modeling - Component Diagrams , clicking on the link below you can see all previous versions of these diagrams. Frontend Componets Diagram Backend Componets Diagram In addition, some new components were created to meet some needs of the frontend and reuse code, since these components are common to several pages of the site, below we have a diagram for the new components. Author: Lorrany Azevedo References [Moodle] Serrano, Milene. V\u00eddeo Aula : Reutiliza\u00e7\u00e3o e framework [Wikipedia] Software Framework Date Author(s) Descri\u00e7\u00e3o Vers\u00e3o 11/20/2020 Lorrany Azevedo Creating the document 0.1 11/20/2020 Lorrany Azevedo Adding introdution 0.2 11/20/2020 Lorrany Azevedo Adding framework and library concepts 0.3 11/20/2020 Lorrany Azevedo Componets concepts 0.4 11/20/2020 Lorrany Azevedo diagram 0.5","title":"Software Reuse"},{"location":"softwareArchiteture/reuse/#software-reuse-document","text":"Software reuse is very necessary when it comes to software quality. Having maintainable, cohesive and loosely coupled software helps us to improve the quality of the software and saves us from various problems that can occur during development, in addition, a well-planned software saves costs, both in labor and consumption of hardware. So currently there are several concepts and standards that help us to implement good software and make it more maintainable. In addition to the forms of reuse already mentioned in the Desing Patterns documents below we will talk about some of them and will discuss in more detail those that were used in our project.","title":"Software Reuse Document"},{"location":"softwareArchiteture/reuse/#framework-and-libraries","text":"The concept of framework, it provides a set of solutions for similar problems of different applications. These generic solutions can be switched according to the wishes and needs of users and applications. Frameworks can be developed by the developers of an application to meet the need to solve a set of problems that appear in several specific features of that application, or it can also be a more general tool that solves more generic problems in the area of \u200b\u200bsoftware development, such as example the React framework, which is a framework written in javascript and generates html, this framework is widely used and allows us to create web pages with complex design without the need for lines and more lines of html. In our project we did not create any specific framework or library for TCLDL, but we used frameworks both on the frontend and on the backend of our application. These frameworks are described in more detail in the DAS document. Frontend framework - Next.Js . Backend framework - Express . Author: Lorrany Azevedo","title":"Framework and Libraries"},{"location":"softwareArchiteture/reuse/#components","text":"Reuse through components is widely used and in our code it was used both on the backend and on the frontend. Some component diagrams have already been made and covered in the delivery of Traditional Modeling - Component Diagrams , clicking on the link below you can see all previous versions of these diagrams. Frontend Componets Diagram Backend Componets Diagram In addition, some new components were created to meet some needs of the frontend and reuse code, since these components are common to several pages of the site, below we have a diagram for the new components. Author: Lorrany Azevedo","title":"Components"},{"location":"softwareArchiteture/reuse/#references","text":"[Moodle] Serrano, Milene. V\u00eddeo Aula : Reutiliza\u00e7\u00e3o e framework [Wikipedia] Software Framework Date Author(s) Descri\u00e7\u00e3o Vers\u00e3o 11/20/2020 Lorrany Azevedo Creating the document 0.1 11/20/2020 Lorrany Azevedo Adding introdution 0.2 11/20/2020 Lorrany Azevedo Adding framework and library concepts 0.3 11/20/2020 Lorrany Azevedo Componets concepts 0.4 11/20/2020 Lorrany Azevedo diagram 0.5","title":"References"},{"location":"traditionalModeling/dynamicDiagrams/activityDiagram/","text":"Activy Diagram Activity diagram is UML behavior diagram which shows flow of control or object flow with emphasis on the sequence and conditions of the flow. The actions coordinated by activity models can be initiated because other actions finish executing, because objects and data become available, or because some events external to the flow occur. The next flow show the flow from different users in the webSite. Author : Gabriel Filipe Version: 2.1 Author : Gabriel Filipe Version: 2.0 Author : Gabriel Filipe Version: 1.4 Author : Gabriel Filipe Version: 1.0 References [WebSite] UML site [Moodle] Serrano, Milene. V\u00eddeo Aula : Diagrama de Atividades Document Versioning Date Author(s) Description Version 09/25/2020 Mikhaelle Bueno Document creation 0.1 09/25/2020 Gabriel Filipe Adds diagram 1.0 09/25/2020 Gabriel Filipe Adds diagram 1.4 09/25/2020 Gabriel Filipe Adds diagram 2.0 09/25/2020 Gabriel Filipe Adds diagram 2.1","title":"Activity Diagrams"},{"location":"traditionalModeling/dynamicDiagrams/activityDiagram/#activy-diagram","text":"Activity diagram is UML behavior diagram which shows flow of control or object flow with emphasis on the sequence and conditions of the flow. The actions coordinated by activity models can be initiated because other actions finish executing, because objects and data become available, or because some events external to the flow occur. The next flow show the flow from different users in the webSite. Author : Gabriel Filipe Version: 2.1 Author : Gabriel Filipe Version: 2.0 Author : Gabriel Filipe Version: 1.4 Author : Gabriel Filipe Version: 1.0","title":"Activy Diagram"},{"location":"traditionalModeling/dynamicDiagrams/activityDiagram/#references","text":"[WebSite] UML site [Moodle] Serrano, Milene. V\u00eddeo Aula : Diagrama de Atividades","title":"References"},{"location":"traditionalModeling/dynamicDiagrams/activityDiagram/#document-versioning","text":"Date Author(s) Description Version 09/25/2020 Mikhaelle Bueno Document creation 0.1 09/25/2020 Gabriel Filipe Adds diagram 1.0 09/25/2020 Gabriel Filipe Adds diagram 1.4 09/25/2020 Gabriel Filipe Adds diagram 2.0 09/25/2020 Gabriel Filipe Adds diagram 2.1","title":"Document Versioning"},{"location":"traditionalModeling/dynamicDiagrams/communicationDiagram/","text":"Communication Diagram The Communication diagram shows interactions between objects using sequential messages, the purpose of this diagram is to be simple and complete, showing the idea of the project clearly and quickly. As the project shows the user's intention to perform actions within the website, it will not be divided between backend and frontend. Version 1 Version 2 References [Moodle] Serrano, Milene. V\u00eddeo Aula : Modelagem, comunica\u00e7\u00e3o. Document Versioning Date Author(s) Description Version 24/09/2020 Vitor Meireles Oliveira Document creation 0.1 25/09/2020 Vitor Meireles Oliveira Update diagram 0.2","title":"Communication Diagrams"},{"location":"traditionalModeling/dynamicDiagrams/communicationDiagram/#communication-diagram","text":"The Communication diagram shows interactions between objects using sequential messages, the purpose of this diagram is to be simple and complete, showing the idea of the project clearly and quickly. As the project shows the user's intention to perform actions within the website, it will not be divided between backend and frontend. Version 1 Version 2","title":"Communication Diagram"},{"location":"traditionalModeling/dynamicDiagrams/communicationDiagram/#references","text":"[Moodle] Serrano, Milene. V\u00eddeo Aula : Modelagem, comunica\u00e7\u00e3o.","title":"References"},{"location":"traditionalModeling/dynamicDiagrams/communicationDiagram/#document-versioning","text":"Date Author(s) Description Version 24/09/2020 Vitor Meireles Oliveira Document creation 0.1 25/09/2020 Vitor Meireles Oliveira Update diagram 0.2","title":"Document Versioning"},{"location":"traditionalModeling/dynamicDiagrams/sequenceDiagram/","text":"Sequence Diagrams The sequence diagram is one of the diagrams of uml modeling that has dynamic character, that is, it is a behavioral diagram. It is one of the most popular diagrams, and it aims to demonstrate the exchange of messages between the defined entities, this exchange takes place over a lifeline and has several notations typical of the sequence diagarama to make a visual demonstration of how these exchanges happen. User SignUp The diagram below dynamically exemplifies how the user flow will behave. User SignUp - version 1 User Authentication The diagram below dynamically exemplifies how the user flow will behave. User Authentication - version 1 User Authentication - version 1.2 Paper Submission The diagram below dynamically exemplifies how the paper submission flow will behave. Paper submission - version 1 Tracking Requirements Source Destiny Prototype User authentication and Paper submission Backlog - User Prototype User authentication and Paper submission References [Moodle] Serrano, Milene. V\u00eddeo Aula : Modelagem, Diagrama de Classe, Depend\u00eancia & Associa\u00e7\u00e3o, Classe Concreta & Abstrata & Sobrescrita & Sobrecarga, Agrega\u00e7\u00e3o & Composi\u00e7\u00e3o, Heran\u00e7a & Realiza\u00e7\u00e3o [Moodle] Serrano, Milene. V\u00eddeo Aula : Diagrama de sequencia [WebSite] UML site Document Versioning Date Author(s) Description Version 21/09/2020 Mikhaelle Bueno Document creation 0.1 25/09/2020 Lorrany Azevedo Adding description 0.2 25/09/2020 Lorrany Azevedo Adding User authentication diagram 0.3 25/09/2020 Lorrany Azevedo Adding paper submission diagram 0.4 25/09/2020 Lorrany Azevedo Adding tracking 0.5 25/09/2020 Mikhaelle Bueno Fix Format 0.6 25/09/2020 Ygor Galeno Adding old versions of diagram 0.7","title":"Sequence Diagrams"},{"location":"traditionalModeling/dynamicDiagrams/sequenceDiagram/#sequence-diagrams","text":"The sequence diagram is one of the diagrams of uml modeling that has dynamic character, that is, it is a behavioral diagram. It is one of the most popular diagrams, and it aims to demonstrate the exchange of messages between the defined entities, this exchange takes place over a lifeline and has several notations typical of the sequence diagarama to make a visual demonstration of how these exchanges happen.","title":"Sequence Diagrams"},{"location":"traditionalModeling/dynamicDiagrams/sequenceDiagram/#user-signup","text":"The diagram below dynamically exemplifies how the user flow will behave. User SignUp - version 1","title":"User SignUp"},{"location":"traditionalModeling/dynamicDiagrams/sequenceDiagram/#user-authentication","text":"The diagram below dynamically exemplifies how the user flow will behave. User Authentication - version 1 User Authentication - version 1.2","title":"User Authentication"},{"location":"traditionalModeling/dynamicDiagrams/sequenceDiagram/#paper-submission","text":"The diagram below dynamically exemplifies how the paper submission flow will behave. Paper submission - version 1","title":"Paper Submission"},{"location":"traditionalModeling/dynamicDiagrams/sequenceDiagram/#tracking-requirements","text":"Source Destiny Prototype User authentication and Paper submission Backlog - User Prototype User authentication and Paper submission","title":"Tracking Requirements"},{"location":"traditionalModeling/dynamicDiagrams/sequenceDiagram/#references","text":"[Moodle] Serrano, Milene. V\u00eddeo Aula : Modelagem, Diagrama de Classe, Depend\u00eancia & Associa\u00e7\u00e3o, Classe Concreta & Abstrata & Sobrescrita & Sobrecarga, Agrega\u00e7\u00e3o & Composi\u00e7\u00e3o, Heran\u00e7a & Realiza\u00e7\u00e3o [Moodle] Serrano, Milene. V\u00eddeo Aula : Diagrama de sequencia [WebSite] UML site","title":"References"},{"location":"traditionalModeling/dynamicDiagrams/sequenceDiagram/#document-versioning","text":"Date Author(s) Description Version 21/09/2020 Mikhaelle Bueno Document creation 0.1 25/09/2020 Lorrany Azevedo Adding description 0.2 25/09/2020 Lorrany Azevedo Adding User authentication diagram 0.3 25/09/2020 Lorrany Azevedo Adding paper submission diagram 0.4 25/09/2020 Lorrany Azevedo Adding tracking 0.5 25/09/2020 Mikhaelle Bueno Fix Format 0.6 25/09/2020 Ygor Galeno Adding old versions of diagram 0.7","title":"Document Versioning"},{"location":"traditionalModeling/dynamicDiagrams/stateDiagram/","text":"State Machine Behavioral state machine is specialization of behavior and is used to specify discrete behavior of a part of designed system through finite state transitions. The state machine formalism used in this case is an object-based variant of Harel statecharts. Paper Submission The diagram below dynamically exemplifies the states of a paper submission. - Paper submission - version 1 References [Moodle] Serrano, Milene. V\u00eddeo Aula : Diagrama de estado [WebSite] UML site Document Versioning Date Author(s) Description Version 25/09/2020 Guilherme Deusdar\u00e1 Document creation 0.1","title":"State Diagrams"},{"location":"traditionalModeling/dynamicDiagrams/stateDiagram/#state-machine","text":"Behavioral state machine is specialization of behavior and is used to specify discrete behavior of a part of designed system through finite state transitions. The state machine formalism used in this case is an object-based variant of Harel statecharts.","title":"State Machine"},{"location":"traditionalModeling/dynamicDiagrams/stateDiagram/#paper-submission","text":"The diagram below dynamically exemplifies the states of a paper submission.","title":"Paper Submission"},{"location":"traditionalModeling/dynamicDiagrams/stateDiagram/#-paper-submission-version-1","text":"","title":"- Paper submission - version 1"},{"location":"traditionalModeling/dynamicDiagrams/stateDiagram/#references","text":"[Moodle] Serrano, Milene. V\u00eddeo Aula : Diagrama de estado [WebSite] UML site","title":"References"},{"location":"traditionalModeling/dynamicDiagrams/stateDiagram/#document-versioning","text":"Date Author(s) Description Version 25/09/2020 Guilherme Deusdar\u00e1 Document creation 0.1","title":"Document Versioning"},{"location":"traditionalModeling/dynamicDiagrams/userCase/","text":"Use case diagram Description A use case diagram at its simplest is a representation of a user's interaction with the system that shows the relationship between the user and the different use cases in which the user is involved. A use case diagram can identify the different types of users of a system and the different use cases and will often be accompanied by other types of diagrams as well. The use cases are represented by either circles or ellipses. While a use case itself might drill into a lot of detail about every possibility, a use-case diagram can help provide a higher-level view of the system. It has been said before that \"Use case diagrams are the blueprints for your system\". They provide the simplified and graphical representation of what the system must actually do. Due to their simplistic nature, use case diagrams can be a good communication tool for stakeholders. The drawings attempt to mimic the real world and provide a view for the stakeholder to understand how the system is going to be designed. Siau and Lee conducted research to determine if there was a valid situation for use case diagrams at all or if they were unnecessary. What was found was that the use case diagrams conveyed the intent of the system in a more simplified manner to stakeholders and that they were \"interpreted more completely than class diagrams\". The purpose of the use case diagrams is simply to provide the high level view of the system and convey the requirements in laypeople's terms for the stakeholders. Additional diagrams and documentation can be used to provide a complete functional and technical view of the system. Author : Gabriel Filipe Version: 2.0 For TCLDL project were made the following use cases: Author : Gabriel Filipe Version: 1.0 References [Youtube] dos Reis, F\u00e1bio. V\u00eddeo Aula : Curso de UML - O que s\u00e3o Casos de Uso (https://www.youtube.com/watch?v=ePX-S4Leq7Y&t=764s). [WebSite] https://en.wikipedia.org/wiki/Use_case_diagram Document Versioning Date Author(s) Descri\u00e7\u00e3o Vers\u00e3o 09/21/2020 Gabriel Filipe Adds description 0.1 09/21/2020 Gabriel Filipe Adds user case v1 0.1 09/21/2020 Gabriel Filipe Adds user case v2 0.1","title":"User Case Diagrams"},{"location":"traditionalModeling/dynamicDiagrams/userCase/#use-case-diagram","text":"","title":"Use case diagram"},{"location":"traditionalModeling/dynamicDiagrams/userCase/#description","text":"A use case diagram at its simplest is a representation of a user's interaction with the system that shows the relationship between the user and the different use cases in which the user is involved. A use case diagram can identify the different types of users of a system and the different use cases and will often be accompanied by other types of diagrams as well. The use cases are represented by either circles or ellipses. While a use case itself might drill into a lot of detail about every possibility, a use-case diagram can help provide a higher-level view of the system. It has been said before that \"Use case diagrams are the blueprints for your system\". They provide the simplified and graphical representation of what the system must actually do. Due to their simplistic nature, use case diagrams can be a good communication tool for stakeholders. The drawings attempt to mimic the real world and provide a view for the stakeholder to understand how the system is going to be designed. Siau and Lee conducted research to determine if there was a valid situation for use case diagrams at all or if they were unnecessary. What was found was that the use case diagrams conveyed the intent of the system in a more simplified manner to stakeholders and that they were \"interpreted more completely than class diagrams\". The purpose of the use case diagrams is simply to provide the high level view of the system and convey the requirements in laypeople's terms for the stakeholders. Additional diagrams and documentation can be used to provide a complete functional and technical view of the system. Author : Gabriel Filipe Version: 2.0","title":"Description"},{"location":"traditionalModeling/dynamicDiagrams/userCase/#for-tcldl-project-were-made-the-following-use-cases","text":"Author : Gabriel Filipe Version: 1.0","title":"For TCLDL project were made the following use cases:"},{"location":"traditionalModeling/dynamicDiagrams/userCase/#references","text":"[Youtube] dos Reis, F\u00e1bio. V\u00eddeo Aula : Curso de UML - O que s\u00e3o Casos de Uso (https://www.youtube.com/watch?v=ePX-S4Leq7Y&t=764s). [WebSite] https://en.wikipedia.org/wiki/Use_case_diagram","title":"References"},{"location":"traditionalModeling/dynamicDiagrams/userCase/#document-versioning","text":"Date Author(s) Descri\u00e7\u00e3o Vers\u00e3o 09/21/2020 Gabriel Filipe Adds description 0.1 09/21/2020 Gabriel Filipe Adds user case v1 0.1 09/21/2020 Gabriel Filipe Adds user case v2 0.1","title":"Document Versioning"},{"location":"traditionalModeling/staticDiagrams/classDiagram/","text":"Class Diagrams In Object Oriented Programming, classes are fundamental to the execution of the paradigm. UML created the Class Diagram to facilitate the understanding and design of the software, showing its properties, methods and relationships. Back-end The back-end will be built by services made with the Express microframework in NodeJs, using JavaScript language and Hexagonal architecture. Each of the microservices has a corresponding diagram. Mail Service Vers\u00e3o 1.0 Paper Service Version 1 Version 2 Tracking Requirements Source Destiny Prototype Questionary Backlog - User Prototype User Lexicos - Domain / Prototype Domain Prototype / Storyboard Paper Backlog - Graph Graph Search Service References [Moodle] Serrano, Milene. V\u00eddeo Aula : Modelagem, Diagrama de Classe, Depend\u00eancia & Associa\u00e7\u00e3o, Classe Concreta & Abstrata & Sobrescrita & Sobrecarga, Agrega\u00e7\u00e3o & Composi\u00e7\u00e3o, Heran\u00e7a & Realiza\u00e7\u00e3o [WebSite] UML site Document Versioning Date Author(s) Description Version 19/09/2020 Mikhaelle Bueno Document creation 0.1 21/09/2020 Mikhaelle Bueno Add Diagram 0.2 24/09/2020 Mikhaelle Bueno Add Diagram 0.3 25/09/2020 Mikhaelle Bueno Organize document 0.4 25/09/2020 Mikhaelle Bueno Fix format 0.5","title":"Class Diagrams"},{"location":"traditionalModeling/staticDiagrams/classDiagram/#class-diagrams","text":"In Object Oriented Programming, classes are fundamental to the execution of the paradigm. UML created the Class Diagram to facilitate the understanding and design of the software, showing its properties, methods and relationships.","title":"Class Diagrams"},{"location":"traditionalModeling/staticDiagrams/classDiagram/#back-end","text":"The back-end will be built by services made with the Express microframework in NodeJs, using JavaScript language and Hexagonal architecture. Each of the microservices has a corresponding diagram.","title":"Back-end"},{"location":"traditionalModeling/staticDiagrams/classDiagram/#mail-service","text":"Vers\u00e3o 1.0","title":"Mail Service"},{"location":"traditionalModeling/staticDiagrams/classDiagram/#paper-service","text":"Version 1 Version 2","title":"Paper Service"},{"location":"traditionalModeling/staticDiagrams/classDiagram/#tracking-requirements","text":"Source Destiny Prototype Questionary Backlog - User Prototype User Lexicos - Domain / Prototype Domain Prototype / Storyboard Paper Backlog - Graph Graph","title":"Tracking Requirements"},{"location":"traditionalModeling/staticDiagrams/classDiagram/#search-service","text":"","title":"Search Service"},{"location":"traditionalModeling/staticDiagrams/classDiagram/#references","text":"[Moodle] Serrano, Milene. V\u00eddeo Aula : Modelagem, Diagrama de Classe, Depend\u00eancia & Associa\u00e7\u00e3o, Classe Concreta & Abstrata & Sobrescrita & Sobrecarga, Agrega\u00e7\u00e3o & Composi\u00e7\u00e3o, Heran\u00e7a & Realiza\u00e7\u00e3o [WebSite] UML site","title":"References"},{"location":"traditionalModeling/staticDiagrams/classDiagram/#document-versioning","text":"Date Author(s) Description Version 19/09/2020 Mikhaelle Bueno Document creation 0.1 21/09/2020 Mikhaelle Bueno Add Diagram 0.2 24/09/2020 Mikhaelle Bueno Add Diagram 0.3 25/09/2020 Mikhaelle Bueno Organize document 0.4 25/09/2020 Mikhaelle Bueno Fix format 0.5","title":"Document Versioning"},{"location":"traditionalModeling/staticDiagrams/componentDiagram/","text":"Component Diagrams The component diagram is a diagram of the uml modeling approach that shows previously the components, interfaces and relationships existing in a given system, its objective is that we have a visualization of the components that will be part of our system, it can also be adapted by components equivalents later, if necessary. In this diagram we can represent both physical and logical components of our system. Frontend The frontend will be built using React, a frontend framework in JavaScript language. Below you can view the versions of the frontend component diagram. Version 1 Version 2 Backend The backend will be built using Express to route as API, a backend library in JavaScript language and PostgreSQL as database, a relational database. Below you can view the versions of the frontend component diagram. Version 1 Version 2 Tracking Requirements Source Destiny Prototype Authenticated user flow, User Flow Backlog - User Prototype Backend BrainStorm All diagram References [Moodle] Serrano, Milene. V\u00eddeo Aula : Modelagem, Diagrama de Classe, Depend\u00eancia & Associa\u00e7\u00e3o, Classe Concreta & Abstrata & Sobrescrita & Sobrecarga, Agrega\u00e7\u00e3o & Composi\u00e7\u00e3o, Heran\u00e7a & Realiza\u00e7\u00e3o [WebSite] UML site [WebSite] Diagrama de Componentes Document Versioning Date Author(s) Description Version 21/09/2020 Mikhaelle Bueno Document creation 0.1 21/09/2020 Lorrany Azevedo Adding description and component diagram version 1 0.2 18/09/2020 Lorrany Azevedo and Guilherme Create component diagram 0.3 21/09/2020 Lorrany Azevedo Adding component diagram version 2 0.4 25/09/2020 Lorrany Azevedo Adding tracking requirements 0.5 25/09/2020 Mikhaelle Bueno Fix Format 0.6 25/09/2020 Vitor Meireles Adding backend diagram 0.7","title":"Component Diagrams"},{"location":"traditionalModeling/staticDiagrams/componentDiagram/#component-diagrams","text":"The component diagram is a diagram of the uml modeling approach that shows previously the components, interfaces and relationships existing in a given system, its objective is that we have a visualization of the components that will be part of our system, it can also be adapted by components equivalents later, if necessary. In this diagram we can represent both physical and logical components of our system.","title":"Component Diagrams"},{"location":"traditionalModeling/staticDiagrams/componentDiagram/#frontend","text":"The frontend will be built using React, a frontend framework in JavaScript language. Below you can view the versions of the frontend component diagram. Version 1 Version 2","title":"Frontend"},{"location":"traditionalModeling/staticDiagrams/componentDiagram/#backend","text":"The backend will be built using Express to route as API, a backend library in JavaScript language and PostgreSQL as database, a relational database. Below you can view the versions of the frontend component diagram. Version 1 Version 2","title":"Backend"},{"location":"traditionalModeling/staticDiagrams/componentDiagram/#tracking-requirements","text":"Source Destiny Prototype Authenticated user flow, User Flow Backlog - User Prototype Backend BrainStorm All diagram","title":"Tracking Requirements"},{"location":"traditionalModeling/staticDiagrams/componentDiagram/#references","text":"[Moodle] Serrano, Milene. V\u00eddeo Aula : Modelagem, Diagrama de Classe, Depend\u00eancia & Associa\u00e7\u00e3o, Classe Concreta & Abstrata & Sobrescrita & Sobrecarga, Agrega\u00e7\u00e3o & Composi\u00e7\u00e3o, Heran\u00e7a & Realiza\u00e7\u00e3o [WebSite] UML site [WebSite] Diagrama de Componentes","title":"References"},{"location":"traditionalModeling/staticDiagrams/componentDiagram/#document-versioning","text":"Date Author(s) Description Version 21/09/2020 Mikhaelle Bueno Document creation 0.1 21/09/2020 Lorrany Azevedo Adding description and component diagram version 1 0.2 18/09/2020 Lorrany Azevedo and Guilherme Create component diagram 0.3 21/09/2020 Lorrany Azevedo Adding component diagram version 2 0.4 25/09/2020 Lorrany Azevedo Adding tracking requirements 0.5 25/09/2020 Mikhaelle Bueno Fix Format 0.6 25/09/2020 Vitor Meireles Adding backend diagram 0.7","title":"Document Versioning"},{"location":"traditionalModeling/staticDiagrams/packageDiagram/","text":"Package Diagrams The Package Diagram, defined by the UML, describes the packages or pieces of the system divided into logical groupings showing the dependencies between them. This diagram is widely used to illustrate the architecture of a system showing the grouping of its classes. Frontend The frontend will be built using React, a frontend framework in JavaScript language. Below you can view two frontend package diagrams. Version 1 Package diagram General Strcuture - version 1 Package diagram General Strcuture - version 2 Package diagram Pages and Components - version 1 Backend The back-end will be built by services made with the Express microframework in NodeJs, using JavaScript language and Hexagonal architecture. Each of the microservices has a corresponding diagram. Overview At the image below, it is possible to see two main packages, 'Users' and 'Database'. The other packages have dependency relation with the main packages. Version 1 Version 2 Version 3 Tracking Requirements Source Destiny Prototype General Structure, Pages and Components Backlog - User Prototype General Structure, Pages and Components BrainStorm General Structure, Pages and Components References [Moodle] Serrano, Milene. V\u00eddeo Aula : Modelagem, Diagrama de Classe, Depend\u00eancia & Associa\u00e7\u00e3o, Classe Concreta & Abstrata & Sobrescrita & Sobrecarga, Agrega\u00e7\u00e3o & Composi\u00e7\u00e3o, Heran\u00e7a & Realiza\u00e7\u00e3o [Moodle] Serrano, Milene. V\u00eddeo Aula : Diagrama de Pacotes [WebSite] UML site [WebSite] Diagrama de Pacotes Document Versioning Date Author(s) Description Version 21/09/2020 Lorrany Azevedo Document creation 0.1 22/09/2020 Guilherme and Lorrany Azevedo Adding description and diagrams 0.2 25/09/2020 Guilherme and Lorrany Azevedo Adding tracking 0.3 24/09/2020 Mikhaelle Bueno Adding Paper Service diagram 0.4 25/09/2020 Vitor Meireles Add backend diagram 0.5 25/09/2020 Mikhaelle Bueno Fix format 0.6","title":"Package Diagrams"},{"location":"traditionalModeling/staticDiagrams/packageDiagram/#package-diagrams","text":"The Package Diagram, defined by the UML, describes the packages or pieces of the system divided into logical groupings showing the dependencies between them. This diagram is widely used to illustrate the architecture of a system showing the grouping of its classes.","title":"Package Diagrams"},{"location":"traditionalModeling/staticDiagrams/packageDiagram/#frontend","text":"The frontend will be built using React, a frontend framework in JavaScript language. Below you can view two frontend package diagrams. Version 1 Package diagram General Strcuture - version 1 Package diagram General Strcuture - version 2 Package diagram Pages and Components - version 1","title":"Frontend"},{"location":"traditionalModeling/staticDiagrams/packageDiagram/#backend","text":"The back-end will be built by services made with the Express microframework in NodeJs, using JavaScript language and Hexagonal architecture. Each of the microservices has a corresponding diagram.","title":"Backend"},{"location":"traditionalModeling/staticDiagrams/packageDiagram/#overview","text":"At the image below, it is possible to see two main packages, 'Users' and 'Database'. The other packages have dependency relation with the main packages. Version 1 Version 2 Version 3","title":"Overview"},{"location":"traditionalModeling/staticDiagrams/packageDiagram/#tracking-requirements","text":"Source Destiny Prototype General Structure, Pages and Components Backlog - User Prototype General Structure, Pages and Components BrainStorm General Structure, Pages and Components","title":"Tracking Requirements"},{"location":"traditionalModeling/staticDiagrams/packageDiagram/#references","text":"[Moodle] Serrano, Milene. V\u00eddeo Aula : Modelagem, Diagrama de Classe, Depend\u00eancia & Associa\u00e7\u00e3o, Classe Concreta & Abstrata & Sobrescrita & Sobrecarga, Agrega\u00e7\u00e3o & Composi\u00e7\u00e3o, Heran\u00e7a & Realiza\u00e7\u00e3o [Moodle] Serrano, Milene. V\u00eddeo Aula : Diagrama de Pacotes [WebSite] UML site [WebSite] Diagrama de Pacotes","title":"References"},{"location":"traditionalModeling/staticDiagrams/packageDiagram/#document-versioning","text":"Date Author(s) Description Version 21/09/2020 Lorrany Azevedo Document creation 0.1 22/09/2020 Guilherme and Lorrany Azevedo Adding description and diagrams 0.2 25/09/2020 Guilherme and Lorrany Azevedo Adding tracking 0.3 24/09/2020 Mikhaelle Bueno Adding Paper Service diagram 0.4 25/09/2020 Vitor Meireles Add backend diagram 0.5 25/09/2020 Mikhaelle Bueno Fix format 0.6","title":"Document Versioning"},{"location":"traditionalModeling/staticDiagrams/images/classDiagramV1/","text":"Class Diagrams - Overview - Version 1 Tracking Requirements Source Destiny Prototype Questionary Backlog - User Prototype User Lexicos - Domain / Prototype Domain Prototype / Storyboard Paper Document Versioning Date Author(s) Description Version 21/09/2020 Mikhaelle Bueno Document creation 0.1","title":"Class Diagrams - Overview - Version 1"},{"location":"traditionalModeling/staticDiagrams/images/classDiagramV1/#class-diagrams-overview-version-1","text":"","title":"Class Diagrams - Overview - Version 1"},{"location":"traditionalModeling/staticDiagrams/images/classDiagramV1/#tracking-requirements","text":"Source Destiny Prototype Questionary Backlog - User Prototype User Lexicos - Domain / Prototype Domain Prototype / Storyboard Paper","title":"Tracking Requirements"},{"location":"traditionalModeling/staticDiagrams/images/classDiagramV1/#document-versioning","text":"Date Author(s) Description Version 21/09/2020 Mikhaelle Bueno Document creation 0.1","title":"Document Versioning"},{"location":"traditionalModeling/staticDiagrams/images/classDiagramV2/","text":"Class Diagrams - Overview - Version 2 Tracking Requirements Source Destiny Prototype Questionary Backlog - User Prototype User Lexicos - Domain / Prototype Domain Prototype / Storyboard Paper Backlog - Graph Graph Document Versioning Date Author(s) Description Version 21/09/2020 Mikhaelle Bueno Document creation 0.1","title":"Class Diagrams - Overview - Version 2"},{"location":"traditionalModeling/staticDiagrams/images/classDiagramV2/#class-diagrams-overview-version-2","text":"","title":"Class Diagrams - Overview - Version 2"},{"location":"traditionalModeling/staticDiagrams/images/classDiagramV2/#tracking-requirements","text":"Source Destiny Prototype Questionary Backlog - User Prototype User Lexicos - Domain / Prototype Domain Prototype / Storyboard Paper Backlog - Graph Graph","title":"Tracking Requirements"},{"location":"traditionalModeling/staticDiagrams/images/classDiagramV2/#document-versioning","text":"Date Author(s) Description Version 21/09/2020 Mikhaelle Bueno Document creation 0.1","title":"Document Versioning"}]}